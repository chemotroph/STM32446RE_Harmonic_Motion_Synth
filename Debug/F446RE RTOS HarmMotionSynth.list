
F446RE RTOS HarmMotionSynth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040d0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080042a0  080042a0  000142a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004310  08004310  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08004310  08004310  00014310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004318  08004318  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004318  08004318  00014318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800431c  0800431c  0001431c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08004320  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000040e8  20000018  08004338  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004100  08004338  00024100  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011ecb  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000295e  00000000  00000000  00031f13  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f98  00000000  00000000  00034878  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e50  00000000  00000000  00035810  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023772  00000000  00000000  00036660  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cb59  00000000  00000000  00059dd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d8403  00000000  00000000  0006692b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013ed2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040e8  00000000  00000000  0013edac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000018 	.word	0x20000018
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004288 	.word	0x08004288

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000001c 	.word	0x2000001c
 800020c:	08004288 	.word	0x08004288

08000210 <__aeabi_drsub>:
 8000210:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000214:	e002      	b.n	800021c <__adddf3>
 8000216:	bf00      	nop

08000218 <__aeabi_dsub>:
 8000218:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800021c <__adddf3>:
 800021c:	b530      	push	{r4, r5, lr}
 800021e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000222:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000226:	ea94 0f05 	teq	r4, r5
 800022a:	bf08      	it	eq
 800022c:	ea90 0f02 	teqeq	r0, r2
 8000230:	bf1f      	itttt	ne
 8000232:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000236:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800023e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000242:	f000 80e2 	beq.w	800040a <__adddf3+0x1ee>
 8000246:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800024e:	bfb8      	it	lt
 8000250:	426d      	neglt	r5, r5
 8000252:	dd0c      	ble.n	800026e <__adddf3+0x52>
 8000254:	442c      	add	r4, r5
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	ea82 0000 	eor.w	r0, r2, r0
 8000262:	ea83 0101 	eor.w	r1, r3, r1
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	2d36      	cmp	r5, #54	; 0x36
 8000270:	bf88      	it	hi
 8000272:	bd30      	pophi	{r4, r5, pc}
 8000274:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000278:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800027c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000280:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x70>
 8000286:	4240      	negs	r0, r0
 8000288:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800028c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000290:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000294:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x84>
 800029a:	4252      	negs	r2, r2
 800029c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a0:	ea94 0f05 	teq	r4, r5
 80002a4:	f000 80a7 	beq.w	80003f6 <__adddf3+0x1da>
 80002a8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b0:	db0d      	blt.n	80002ce <__adddf3+0xb2>
 80002b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002b6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ba:	1880      	adds	r0, r0, r2
 80002bc:	f141 0100 	adc.w	r1, r1, #0
 80002c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c4:	1880      	adds	r0, r0, r2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	4159      	adcs	r1, r3
 80002cc:	e00e      	b.n	80002ec <__adddf3+0xd0>
 80002ce:	f1a5 0520 	sub.w	r5, r5, #32
 80002d2:	f10e 0e20 	add.w	lr, lr, #32
 80002d6:	2a01      	cmp	r2, #1
 80002d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002dc:	bf28      	it	cs
 80002de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e2:	fa43 f305 	asr.w	r3, r3, r5
 80002e6:	18c0      	adds	r0, r0, r3
 80002e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f0:	d507      	bpl.n	8000302 <__adddf3+0xe6>
 80002f2:	f04f 0e00 	mov.w	lr, #0
 80002f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000302:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000306:	d31b      	bcc.n	8000340 <__adddf3+0x124>
 8000308:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800030c:	d30c      	bcc.n	8000328 <__adddf3+0x10c>
 800030e:	0849      	lsrs	r1, r1, #1
 8000310:	ea5f 0030 	movs.w	r0, r0, rrx
 8000314:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000318:	f104 0401 	add.w	r4, r4, #1
 800031c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000320:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000324:	f080 809a 	bcs.w	800045c <__adddf3+0x240>
 8000328:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800032c:	bf08      	it	eq
 800032e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000332:	f150 0000 	adcs.w	r0, r0, #0
 8000336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033a:	ea41 0105 	orr.w	r1, r1, r5
 800033e:	bd30      	pop	{r4, r5, pc}
 8000340:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000344:	4140      	adcs	r0, r0
 8000346:	eb41 0101 	adc.w	r1, r1, r1
 800034a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800034e:	f1a4 0401 	sub.w	r4, r4, #1
 8000352:	d1e9      	bne.n	8000328 <__adddf3+0x10c>
 8000354:	f091 0f00 	teq	r1, #0
 8000358:	bf04      	itt	eq
 800035a:	4601      	moveq	r1, r0
 800035c:	2000      	moveq	r0, #0
 800035e:	fab1 f381 	clz	r3, r1
 8000362:	bf08      	it	eq
 8000364:	3320      	addeq	r3, #32
 8000366:	f1a3 030b 	sub.w	r3, r3, #11
 800036a:	f1b3 0220 	subs.w	r2, r3, #32
 800036e:	da0c      	bge.n	800038a <__adddf3+0x16e>
 8000370:	320c      	adds	r2, #12
 8000372:	dd08      	ble.n	8000386 <__adddf3+0x16a>
 8000374:	f102 0c14 	add.w	ip, r2, #20
 8000378:	f1c2 020c 	rsb	r2, r2, #12
 800037c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000380:	fa21 f102 	lsr.w	r1, r1, r2
 8000384:	e00c      	b.n	80003a0 <__adddf3+0x184>
 8000386:	f102 0214 	add.w	r2, r2, #20
 800038a:	bfd8      	it	le
 800038c:	f1c2 0c20 	rsble	ip, r2, #32
 8000390:	fa01 f102 	lsl.w	r1, r1, r2
 8000394:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000398:	bfdc      	itt	le
 800039a:	ea41 010c 	orrle.w	r1, r1, ip
 800039e:	4090      	lslle	r0, r2
 80003a0:	1ae4      	subs	r4, r4, r3
 80003a2:	bfa2      	ittt	ge
 80003a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a8:	4329      	orrge	r1, r5
 80003aa:	bd30      	popge	{r4, r5, pc}
 80003ac:	ea6f 0404 	mvn.w	r4, r4
 80003b0:	3c1f      	subs	r4, #31
 80003b2:	da1c      	bge.n	80003ee <__adddf3+0x1d2>
 80003b4:	340c      	adds	r4, #12
 80003b6:	dc0e      	bgt.n	80003d6 <__adddf3+0x1ba>
 80003b8:	f104 0414 	add.w	r4, r4, #20
 80003bc:	f1c4 0220 	rsb	r2, r4, #32
 80003c0:	fa20 f004 	lsr.w	r0, r0, r4
 80003c4:	fa01 f302 	lsl.w	r3, r1, r2
 80003c8:	ea40 0003 	orr.w	r0, r0, r3
 80003cc:	fa21 f304 	lsr.w	r3, r1, r4
 80003d0:	ea45 0103 	orr.w	r1, r5, r3
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f1c4 040c 	rsb	r4, r4, #12
 80003da:	f1c4 0220 	rsb	r2, r4, #32
 80003de:	fa20 f002 	lsr.w	r0, r0, r2
 80003e2:	fa01 f304 	lsl.w	r3, r1, r4
 80003e6:	ea40 0003 	orr.w	r0, r0, r3
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	fa21 f004 	lsr.w	r0, r1, r4
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f094 0f00 	teq	r4, #0
 80003fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003fe:	bf06      	itte	eq
 8000400:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000404:	3401      	addeq	r4, #1
 8000406:	3d01      	subne	r5, #1
 8000408:	e74e      	b.n	80002a8 <__adddf3+0x8c>
 800040a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800040e:	bf18      	it	ne
 8000410:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000414:	d029      	beq.n	800046a <__adddf3+0x24e>
 8000416:	ea94 0f05 	teq	r4, r5
 800041a:	bf08      	it	eq
 800041c:	ea90 0f02 	teqeq	r0, r2
 8000420:	d005      	beq.n	800042e <__adddf3+0x212>
 8000422:	ea54 0c00 	orrs.w	ip, r4, r0
 8000426:	bf04      	itt	eq
 8000428:	4619      	moveq	r1, r3
 800042a:	4610      	moveq	r0, r2
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea91 0f03 	teq	r1, r3
 8000432:	bf1e      	ittt	ne
 8000434:	2100      	movne	r1, #0
 8000436:	2000      	movne	r0, #0
 8000438:	bd30      	popne	{r4, r5, pc}
 800043a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800043e:	d105      	bne.n	800044c <__adddf3+0x230>
 8000440:	0040      	lsls	r0, r0, #1
 8000442:	4149      	adcs	r1, r1
 8000444:	bf28      	it	cs
 8000446:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800044a:	bd30      	pop	{r4, r5, pc}
 800044c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000450:	bf3c      	itt	cc
 8000452:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000456:	bd30      	popcc	{r4, r5, pc}
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000460:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000464:	f04f 0000 	mov.w	r0, #0
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf1a      	itte	ne
 8000470:	4619      	movne	r1, r3
 8000472:	4610      	movne	r0, r2
 8000474:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000478:	bf1c      	itt	ne
 800047a:	460b      	movne	r3, r1
 800047c:	4602      	movne	r2, r0
 800047e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000482:	bf06      	itte	eq
 8000484:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000488:	ea91 0f03 	teqeq	r1, r3
 800048c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	bf00      	nop

08000494 <__aeabi_ui2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f04f 0500 	mov.w	r5, #0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e750      	b.n	8000354 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_i2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004cc:	bf48      	it	mi
 80004ce:	4240      	negmi	r0, r0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e73e      	b.n	8000354 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_f2d>:
 80004d8:	0042      	lsls	r2, r0, #1
 80004da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004de:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004e6:	bf1f      	itttt	ne
 80004e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004f4:	4770      	bxne	lr
 80004f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004fa:	bf08      	it	eq
 80004fc:	4770      	bxeq	lr
 80004fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000502:	bf04      	itt	eq
 8000504:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000508:	4770      	bxeq	lr
 800050a:	b530      	push	{r4, r5, lr}
 800050c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e71c      	b.n	8000354 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_ul2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f04f 0500 	mov.w	r5, #0
 800052a:	e00a      	b.n	8000542 <__aeabi_l2d+0x16>

0800052c <__aeabi_l2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800053a:	d502      	bpl.n	8000542 <__aeabi_l2d+0x16>
 800053c:	4240      	negs	r0, r0
 800053e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000542:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000546:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800054e:	f43f aed8 	beq.w	8000302 <__adddf3+0xe6>
 8000552:	f04f 0203 	mov.w	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 fe03 	lsl.w	lr, r1, r3
 800057a:	ea40 000e 	orr.w	r0, r0, lr
 800057e:	fa21 f102 	lsr.w	r1, r1, r2
 8000582:	4414      	add	r4, r2
 8000584:	e6bd      	b.n	8000302 <__adddf3+0xe6>
 8000586:	bf00      	nop

08000588 <__aeabi_dmul>:
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800058e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000592:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000596:	bf1d      	ittte	ne
 8000598:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800059c:	ea94 0f0c 	teqne	r4, ip
 80005a0:	ea95 0f0c 	teqne	r5, ip
 80005a4:	f000 f8de 	bleq	8000764 <__aeabi_dmul+0x1dc>
 80005a8:	442c      	add	r4, r5
 80005aa:	ea81 0603 	eor.w	r6, r1, r3
 80005ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ba:	bf18      	it	ne
 80005bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c8:	d038      	beq.n	800063c <__aeabi_dmul+0xb4>
 80005ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005de:	f04f 0600 	mov.w	r6, #0
 80005e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005e6:	f09c 0f00 	teq	ip, #0
 80005ea:	bf18      	it	ne
 80005ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005fc:	d204      	bcs.n	8000608 <__aeabi_dmul+0x80>
 80005fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000602:	416d      	adcs	r5, r5
 8000604:	eb46 0606 	adc.w	r6, r6, r6
 8000608:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800060c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000610:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000614:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000618:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800061c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000620:	bf88      	it	hi
 8000622:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000626:	d81e      	bhi.n	8000666 <__aeabi_dmul+0xde>
 8000628:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800062c:	bf08      	it	eq
 800062e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000632:	f150 0000 	adcs.w	r0, r0, #0
 8000636:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000640:	ea46 0101 	orr.w	r1, r6, r1
 8000644:	ea40 0002 	orr.w	r0, r0, r2
 8000648:	ea81 0103 	eor.w	r1, r1, r3
 800064c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000650:	bfc2      	ittt	gt
 8000652:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000656:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800065a:	bd70      	popgt	{r4, r5, r6, pc}
 800065c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000660:	f04f 0e00 	mov.w	lr, #0
 8000664:	3c01      	subs	r4, #1
 8000666:	f300 80ab 	bgt.w	80007c0 <__aeabi_dmul+0x238>
 800066a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800066e:	bfde      	ittt	le
 8000670:	2000      	movle	r0, #0
 8000672:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000676:	bd70      	pople	{r4, r5, r6, pc}
 8000678:	f1c4 0400 	rsb	r4, r4, #0
 800067c:	3c20      	subs	r4, #32
 800067e:	da35      	bge.n	80006ec <__aeabi_dmul+0x164>
 8000680:	340c      	adds	r4, #12
 8000682:	dc1b      	bgt.n	80006bc <__aeabi_dmul+0x134>
 8000684:	f104 0414 	add.w	r4, r4, #20
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f305 	lsl.w	r3, r0, r5
 8000690:	fa20 f004 	lsr.w	r0, r0, r4
 8000694:	fa01 f205 	lsl.w	r2, r1, r5
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ac:	eb42 0106 	adc.w	r1, r2, r6
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 040c 	rsb	r4, r4, #12
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f304 	lsl.w	r3, r0, r4
 80006c8:	fa20 f005 	lsr.w	r0, r0, r5
 80006cc:	fa01 f204 	lsl.w	r2, r1, r4
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006dc:	f141 0100 	adc.w	r1, r1, #0
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 0520 	rsb	r5, r4, #32
 80006f0:	fa00 f205 	lsl.w	r2, r0, r5
 80006f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f8:	fa20 f304 	lsr.w	r3, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea43 0302 	orr.w	r3, r3, r2
 8000704:	fa21 f004 	lsr.w	r0, r1, r4
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	fa21 f204 	lsr.w	r2, r1, r4
 8000710:	ea20 0002 	bic.w	r0, r0, r2
 8000714:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f094 0f00 	teq	r4, #0
 8000728:	d10f      	bne.n	800074a <__aeabi_dmul+0x1c2>
 800072a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800072e:	0040      	lsls	r0, r0, #1
 8000730:	eb41 0101 	adc.w	r1, r1, r1
 8000734:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3c01      	subeq	r4, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1a6>
 800073e:	ea41 0106 	orr.w	r1, r1, r6
 8000742:	f095 0f00 	teq	r5, #0
 8000746:	bf18      	it	ne
 8000748:	4770      	bxne	lr
 800074a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800074e:	0052      	lsls	r2, r2, #1
 8000750:	eb43 0303 	adc.w	r3, r3, r3
 8000754:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3d01      	subeq	r5, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1c6>
 800075e:	ea43 0306 	orr.w	r3, r3, r6
 8000762:	4770      	bx	lr
 8000764:	ea94 0f0c 	teq	r4, ip
 8000768:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800076c:	bf18      	it	ne
 800076e:	ea95 0f0c 	teqne	r5, ip
 8000772:	d00c      	beq.n	800078e <__aeabi_dmul+0x206>
 8000774:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000778:	bf18      	it	ne
 800077a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077e:	d1d1      	bne.n	8000724 <__aeabi_dmul+0x19c>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000792:	bf06      	itte	eq
 8000794:	4610      	moveq	r0, r2
 8000796:	4619      	moveq	r1, r3
 8000798:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079c:	d019      	beq.n	80007d2 <__aeabi_dmul+0x24a>
 800079e:	ea94 0f0c 	teq	r4, ip
 80007a2:	d102      	bne.n	80007aa <__aeabi_dmul+0x222>
 80007a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a8:	d113      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007aa:	ea95 0f0c 	teq	r5, ip
 80007ae:	d105      	bne.n	80007bc <__aeabi_dmul+0x234>
 80007b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007b4:	bf1c      	itt	ne
 80007b6:	4610      	movne	r0, r2
 80007b8:	4619      	movne	r1, r3
 80007ba:	d10a      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007da:	bd70      	pop	{r4, r5, r6, pc}

080007dc <__aeabi_ddiv>:
 80007dc:	b570      	push	{r4, r5, r6, lr}
 80007de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ea:	bf1d      	ittte	ne
 80007ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f0:	ea94 0f0c 	teqne	r4, ip
 80007f4:	ea95 0f0c 	teqne	r5, ip
 80007f8:	f000 f8a7 	bleq	800094a <__aeabi_ddiv+0x16e>
 80007fc:	eba4 0405 	sub.w	r4, r4, r5
 8000800:	ea81 0e03 	eor.w	lr, r1, r3
 8000804:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000808:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800080c:	f000 8088 	beq.w	8000920 <__aeabi_ddiv+0x144>
 8000810:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000814:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000818:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800081c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000820:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000824:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000828:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800082c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000830:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000834:	429d      	cmp	r5, r3
 8000836:	bf08      	it	eq
 8000838:	4296      	cmpeq	r6, r2
 800083a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800083e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000842:	d202      	bcs.n	800084a <__aeabi_ddiv+0x6e>
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	1ab6      	subs	r6, r6, r2
 800084c:	eb65 0503 	sbc.w	r5, r5, r3
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800085a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008bc:	d018      	beq.n	80008f0 <__aeabi_ddiv+0x114>
 80008be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008da:	d1c0      	bne.n	800085e <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e0:	d10b      	bne.n	80008fa <__aeabi_ddiv+0x11e>
 80008e2:	ea41 0100 	orr.w	r1, r1, r0
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ee:	e7b6      	b.n	800085e <__aeabi_ddiv+0x82>
 80008f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f4:	bf04      	itt	eq
 80008f6:	4301      	orreq	r1, r0
 80008f8:	2000      	moveq	r0, #0
 80008fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008fe:	bf88      	it	hi
 8000900:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000904:	f63f aeaf 	bhi.w	8000666 <__aeabi_dmul+0xde>
 8000908:	ebb5 0c03 	subs.w	ip, r5, r3
 800090c:	bf04      	itt	eq
 800090e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000912:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000916:	f150 0000 	adcs.w	r0, r0, #0
 800091a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800091e:	bd70      	pop	{r4, r5, r6, pc}
 8000920:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000924:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000928:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800092c:	bfc2      	ittt	gt
 800092e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000932:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000936:	bd70      	popgt	{r4, r5, r6, pc}
 8000938:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800093c:	f04f 0e00 	mov.w	lr, #0
 8000940:	3c01      	subs	r4, #1
 8000942:	e690      	b.n	8000666 <__aeabi_dmul+0xde>
 8000944:	ea45 0e06 	orr.w	lr, r5, r6
 8000948:	e68d      	b.n	8000666 <__aeabi_dmul+0xde>
 800094a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800094e:	ea94 0f0c 	teq	r4, ip
 8000952:	bf08      	it	eq
 8000954:	ea95 0f0c 	teqeq	r5, ip
 8000958:	f43f af3b 	beq.w	80007d2 <__aeabi_dmul+0x24a>
 800095c:	ea94 0f0c 	teq	r4, ip
 8000960:	d10a      	bne.n	8000978 <__aeabi_ddiv+0x19c>
 8000962:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000966:	f47f af34 	bne.w	80007d2 <__aeabi_dmul+0x24a>
 800096a:	ea95 0f0c 	teq	r5, ip
 800096e:	f47f af25 	bne.w	80007bc <__aeabi_dmul+0x234>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e72c      	b.n	80007d2 <__aeabi_dmul+0x24a>
 8000978:	ea95 0f0c 	teq	r5, ip
 800097c:	d106      	bne.n	800098c <__aeabi_ddiv+0x1b0>
 800097e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000982:	f43f aefd 	beq.w	8000780 <__aeabi_dmul+0x1f8>
 8000986:	4610      	mov	r0, r2
 8000988:	4619      	mov	r1, r3
 800098a:	e722      	b.n	80007d2 <__aeabi_dmul+0x24a>
 800098c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000996:	f47f aec5 	bne.w	8000724 <__aeabi_dmul+0x19c>
 800099a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800099e:	f47f af0d 	bne.w	80007bc <__aeabi_dmul+0x234>
 80009a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009a6:	f47f aeeb 	bne.w	8000780 <__aeabi_dmul+0x1f8>
 80009aa:	e712      	b.n	80007d2 <__aeabi_dmul+0x24a>

080009ac <__aeabi_d2uiz>:
 80009ac:	004a      	lsls	r2, r1, #1
 80009ae:	d211      	bcs.n	80009d4 <__aeabi_d2uiz+0x28>
 80009b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009b4:	d211      	bcs.n	80009da <__aeabi_d2uiz+0x2e>
 80009b6:	d50d      	bpl.n	80009d4 <__aeabi_d2uiz+0x28>
 80009b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c0:	d40e      	bmi.n	80009e0 <__aeabi_d2uiz+0x34>
 80009c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ce:	fa23 f002 	lsr.w	r0, r3, r2
 80009d2:	4770      	bx	lr
 80009d4:	f04f 0000 	mov.w	r0, #0
 80009d8:	4770      	bx	lr
 80009da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009de:	d102      	bne.n	80009e6 <__aeabi_d2uiz+0x3a>
 80009e0:	f04f 30ff 	mov.w	r0, #4294967295
 80009e4:	4770      	bx	lr
 80009e6:	f04f 0000 	mov.w	r0, #0
 80009ea:	4770      	bx	lr

080009ec <__aeabi_d2f>:
 80009ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009f4:	bf24      	itt	cs
 80009f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009fe:	d90d      	bls.n	8000a1c <__aeabi_d2f+0x30>
 8000a00:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a04:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a08:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a0c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a10:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a14:	bf08      	it	eq
 8000a16:	f020 0001 	biceq.w	r0, r0, #1
 8000a1a:	4770      	bx	lr
 8000a1c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a20:	d121      	bne.n	8000a66 <__aeabi_d2f+0x7a>
 8000a22:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a26:	bfbc      	itt	lt
 8000a28:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a2c:	4770      	bxlt	lr
 8000a2e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a32:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a36:	f1c2 0218 	rsb	r2, r2, #24
 8000a3a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a3e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a42:	fa20 f002 	lsr.w	r0, r0, r2
 8000a46:	bf18      	it	ne
 8000a48:	f040 0001 	orrne.w	r0, r0, #1
 8000a4c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a50:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a54:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a58:	ea40 000c 	orr.w	r0, r0, ip
 8000a5c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a64:	e7cc      	b.n	8000a00 <__aeabi_d2f+0x14>
 8000a66:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a6a:	d107      	bne.n	8000a7c <__aeabi_d2f+0x90>
 8000a6c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a70:	bf1e      	ittt	ne
 8000a72:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a76:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a7a:	4770      	bxne	lr
 8000a7c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a80:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <__aeabi_uldivmod>:
 8000a8c:	b953      	cbnz	r3, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a8e:	b94a      	cbnz	r2, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a90:	2900      	cmp	r1, #0
 8000a92:	bf08      	it	eq
 8000a94:	2800      	cmpeq	r0, #0
 8000a96:	bf1c      	itt	ne
 8000a98:	f04f 31ff 	movne.w	r1, #4294967295
 8000a9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa0:	f000 b972 	b.w	8000d88 <__aeabi_idiv0>
 8000aa4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aac:	f000 f806 	bl	8000abc <__udivmoddi4>
 8000ab0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab8:	b004      	add	sp, #16
 8000aba:	4770      	bx	lr

08000abc <__udivmoddi4>:
 8000abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac0:	9e08      	ldr	r6, [sp, #32]
 8000ac2:	4604      	mov	r4, r0
 8000ac4:	4688      	mov	r8, r1
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d14b      	bne.n	8000b62 <__udivmoddi4+0xa6>
 8000aca:	428a      	cmp	r2, r1
 8000acc:	4615      	mov	r5, r2
 8000ace:	d967      	bls.n	8000ba0 <__udivmoddi4+0xe4>
 8000ad0:	fab2 f282 	clz	r2, r2
 8000ad4:	b14a      	cbz	r2, 8000aea <__udivmoddi4+0x2e>
 8000ad6:	f1c2 0720 	rsb	r7, r2, #32
 8000ada:	fa01 f302 	lsl.w	r3, r1, r2
 8000ade:	fa20 f707 	lsr.w	r7, r0, r7
 8000ae2:	4095      	lsls	r5, r2
 8000ae4:	ea47 0803 	orr.w	r8, r7, r3
 8000ae8:	4094      	lsls	r4, r2
 8000aea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000aee:	0c23      	lsrs	r3, r4, #16
 8000af0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000af4:	fa1f fc85 	uxth.w	ip, r5
 8000af8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000afc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b00:	fb07 f10c 	mul.w	r1, r7, ip
 8000b04:	4299      	cmp	r1, r3
 8000b06:	d909      	bls.n	8000b1c <__udivmoddi4+0x60>
 8000b08:	18eb      	adds	r3, r5, r3
 8000b0a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b0e:	f080 811b 	bcs.w	8000d48 <__udivmoddi4+0x28c>
 8000b12:	4299      	cmp	r1, r3
 8000b14:	f240 8118 	bls.w	8000d48 <__udivmoddi4+0x28c>
 8000b18:	3f02      	subs	r7, #2
 8000b1a:	442b      	add	r3, r5
 8000b1c:	1a5b      	subs	r3, r3, r1
 8000b1e:	b2a4      	uxth	r4, r4
 8000b20:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b24:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b2c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b30:	45a4      	cmp	ip, r4
 8000b32:	d909      	bls.n	8000b48 <__udivmoddi4+0x8c>
 8000b34:	192c      	adds	r4, r5, r4
 8000b36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b3a:	f080 8107 	bcs.w	8000d4c <__udivmoddi4+0x290>
 8000b3e:	45a4      	cmp	ip, r4
 8000b40:	f240 8104 	bls.w	8000d4c <__udivmoddi4+0x290>
 8000b44:	3802      	subs	r0, #2
 8000b46:	442c      	add	r4, r5
 8000b48:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b4c:	eba4 040c 	sub.w	r4, r4, ip
 8000b50:	2700      	movs	r7, #0
 8000b52:	b11e      	cbz	r6, 8000b5c <__udivmoddi4+0xa0>
 8000b54:	40d4      	lsrs	r4, r2
 8000b56:	2300      	movs	r3, #0
 8000b58:	e9c6 4300 	strd	r4, r3, [r6]
 8000b5c:	4639      	mov	r1, r7
 8000b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b62:	428b      	cmp	r3, r1
 8000b64:	d909      	bls.n	8000b7a <__udivmoddi4+0xbe>
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	f000 80eb 	beq.w	8000d42 <__udivmoddi4+0x286>
 8000b6c:	2700      	movs	r7, #0
 8000b6e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b72:	4638      	mov	r0, r7
 8000b74:	4639      	mov	r1, r7
 8000b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7a:	fab3 f783 	clz	r7, r3
 8000b7e:	2f00      	cmp	r7, #0
 8000b80:	d147      	bne.n	8000c12 <__udivmoddi4+0x156>
 8000b82:	428b      	cmp	r3, r1
 8000b84:	d302      	bcc.n	8000b8c <__udivmoddi4+0xd0>
 8000b86:	4282      	cmp	r2, r0
 8000b88:	f200 80fa 	bhi.w	8000d80 <__udivmoddi4+0x2c4>
 8000b8c:	1a84      	subs	r4, r0, r2
 8000b8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b92:	2001      	movs	r0, #1
 8000b94:	4698      	mov	r8, r3
 8000b96:	2e00      	cmp	r6, #0
 8000b98:	d0e0      	beq.n	8000b5c <__udivmoddi4+0xa0>
 8000b9a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b9e:	e7dd      	b.n	8000b5c <__udivmoddi4+0xa0>
 8000ba0:	b902      	cbnz	r2, 8000ba4 <__udivmoddi4+0xe8>
 8000ba2:	deff      	udf	#255	; 0xff
 8000ba4:	fab2 f282 	clz	r2, r2
 8000ba8:	2a00      	cmp	r2, #0
 8000baa:	f040 808f 	bne.w	8000ccc <__udivmoddi4+0x210>
 8000bae:	1b49      	subs	r1, r1, r5
 8000bb0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bb4:	fa1f f885 	uxth.w	r8, r5
 8000bb8:	2701      	movs	r7, #1
 8000bba:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bbe:	0c23      	lsrs	r3, r4, #16
 8000bc0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000bc4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bc8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bcc:	4299      	cmp	r1, r3
 8000bce:	d907      	bls.n	8000be0 <__udivmoddi4+0x124>
 8000bd0:	18eb      	adds	r3, r5, r3
 8000bd2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bd6:	d202      	bcs.n	8000bde <__udivmoddi4+0x122>
 8000bd8:	4299      	cmp	r1, r3
 8000bda:	f200 80cd 	bhi.w	8000d78 <__udivmoddi4+0x2bc>
 8000bde:	4684      	mov	ip, r0
 8000be0:	1a59      	subs	r1, r3, r1
 8000be2:	b2a3      	uxth	r3, r4
 8000be4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000be8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bec:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bf0:	fb08 f800 	mul.w	r8, r8, r0
 8000bf4:	45a0      	cmp	r8, r4
 8000bf6:	d907      	bls.n	8000c08 <__udivmoddi4+0x14c>
 8000bf8:	192c      	adds	r4, r5, r4
 8000bfa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x14a>
 8000c00:	45a0      	cmp	r8, r4
 8000c02:	f200 80b6 	bhi.w	8000d72 <__udivmoddi4+0x2b6>
 8000c06:	4618      	mov	r0, r3
 8000c08:	eba4 0408 	sub.w	r4, r4, r8
 8000c0c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c10:	e79f      	b.n	8000b52 <__udivmoddi4+0x96>
 8000c12:	f1c7 0c20 	rsb	ip, r7, #32
 8000c16:	40bb      	lsls	r3, r7
 8000c18:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c1c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c20:	fa01 f407 	lsl.w	r4, r1, r7
 8000c24:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c28:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c2c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c30:	4325      	orrs	r5, r4
 8000c32:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c36:	0c2c      	lsrs	r4, r5, #16
 8000c38:	fb08 3319 	mls	r3, r8, r9, r3
 8000c3c:	fa1f fa8e 	uxth.w	sl, lr
 8000c40:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c44:	fb09 f40a 	mul.w	r4, r9, sl
 8000c48:	429c      	cmp	r4, r3
 8000c4a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c4e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c52:	d90b      	bls.n	8000c6c <__udivmoddi4+0x1b0>
 8000c54:	eb1e 0303 	adds.w	r3, lr, r3
 8000c58:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c5c:	f080 8087 	bcs.w	8000d6e <__udivmoddi4+0x2b2>
 8000c60:	429c      	cmp	r4, r3
 8000c62:	f240 8084 	bls.w	8000d6e <__udivmoddi4+0x2b2>
 8000c66:	f1a9 0902 	sub.w	r9, r9, #2
 8000c6a:	4473      	add	r3, lr
 8000c6c:	1b1b      	subs	r3, r3, r4
 8000c6e:	b2ad      	uxth	r5, r5
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c7c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c80:	45a2      	cmp	sl, r4
 8000c82:	d908      	bls.n	8000c96 <__udivmoddi4+0x1da>
 8000c84:	eb1e 0404 	adds.w	r4, lr, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	d26b      	bcs.n	8000d66 <__udivmoddi4+0x2aa>
 8000c8e:	45a2      	cmp	sl, r4
 8000c90:	d969      	bls.n	8000d66 <__udivmoddi4+0x2aa>
 8000c92:	3802      	subs	r0, #2
 8000c94:	4474      	add	r4, lr
 8000c96:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c9a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c9e:	eba4 040a 	sub.w	r4, r4, sl
 8000ca2:	454c      	cmp	r4, r9
 8000ca4:	46c2      	mov	sl, r8
 8000ca6:	464b      	mov	r3, r9
 8000ca8:	d354      	bcc.n	8000d54 <__udivmoddi4+0x298>
 8000caa:	d051      	beq.n	8000d50 <__udivmoddi4+0x294>
 8000cac:	2e00      	cmp	r6, #0
 8000cae:	d069      	beq.n	8000d84 <__udivmoddi4+0x2c8>
 8000cb0:	ebb1 050a 	subs.w	r5, r1, sl
 8000cb4:	eb64 0403 	sbc.w	r4, r4, r3
 8000cb8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cbc:	40fd      	lsrs	r5, r7
 8000cbe:	40fc      	lsrs	r4, r7
 8000cc0:	ea4c 0505 	orr.w	r5, ip, r5
 8000cc4:	e9c6 5400 	strd	r5, r4, [r6]
 8000cc8:	2700      	movs	r7, #0
 8000cca:	e747      	b.n	8000b5c <__udivmoddi4+0xa0>
 8000ccc:	f1c2 0320 	rsb	r3, r2, #32
 8000cd0:	fa20 f703 	lsr.w	r7, r0, r3
 8000cd4:	4095      	lsls	r5, r2
 8000cd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cda:	fa21 f303 	lsr.w	r3, r1, r3
 8000cde:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ce2:	4338      	orrs	r0, r7
 8000ce4:	0c01      	lsrs	r1, r0, #16
 8000ce6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cea:	fa1f f885 	uxth.w	r8, r5
 8000cee:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cf2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf6:	fb07 f308 	mul.w	r3, r7, r8
 8000cfa:	428b      	cmp	r3, r1
 8000cfc:	fa04 f402 	lsl.w	r4, r4, r2
 8000d00:	d907      	bls.n	8000d12 <__udivmoddi4+0x256>
 8000d02:	1869      	adds	r1, r5, r1
 8000d04:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d08:	d22f      	bcs.n	8000d6a <__udivmoddi4+0x2ae>
 8000d0a:	428b      	cmp	r3, r1
 8000d0c:	d92d      	bls.n	8000d6a <__udivmoddi4+0x2ae>
 8000d0e:	3f02      	subs	r7, #2
 8000d10:	4429      	add	r1, r5
 8000d12:	1acb      	subs	r3, r1, r3
 8000d14:	b281      	uxth	r1, r0
 8000d16:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d1a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d22:	fb00 f308 	mul.w	r3, r0, r8
 8000d26:	428b      	cmp	r3, r1
 8000d28:	d907      	bls.n	8000d3a <__udivmoddi4+0x27e>
 8000d2a:	1869      	adds	r1, r5, r1
 8000d2c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d30:	d217      	bcs.n	8000d62 <__udivmoddi4+0x2a6>
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d915      	bls.n	8000d62 <__udivmoddi4+0x2a6>
 8000d36:	3802      	subs	r0, #2
 8000d38:	4429      	add	r1, r5
 8000d3a:	1ac9      	subs	r1, r1, r3
 8000d3c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d40:	e73b      	b.n	8000bba <__udivmoddi4+0xfe>
 8000d42:	4637      	mov	r7, r6
 8000d44:	4630      	mov	r0, r6
 8000d46:	e709      	b.n	8000b5c <__udivmoddi4+0xa0>
 8000d48:	4607      	mov	r7, r0
 8000d4a:	e6e7      	b.n	8000b1c <__udivmoddi4+0x60>
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	e6fb      	b.n	8000b48 <__udivmoddi4+0x8c>
 8000d50:	4541      	cmp	r1, r8
 8000d52:	d2ab      	bcs.n	8000cac <__udivmoddi4+0x1f0>
 8000d54:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d58:	eb69 020e 	sbc.w	r2, r9, lr
 8000d5c:	3801      	subs	r0, #1
 8000d5e:	4613      	mov	r3, r2
 8000d60:	e7a4      	b.n	8000cac <__udivmoddi4+0x1f0>
 8000d62:	4660      	mov	r0, ip
 8000d64:	e7e9      	b.n	8000d3a <__udivmoddi4+0x27e>
 8000d66:	4618      	mov	r0, r3
 8000d68:	e795      	b.n	8000c96 <__udivmoddi4+0x1da>
 8000d6a:	4667      	mov	r7, ip
 8000d6c:	e7d1      	b.n	8000d12 <__udivmoddi4+0x256>
 8000d6e:	4681      	mov	r9, r0
 8000d70:	e77c      	b.n	8000c6c <__udivmoddi4+0x1b0>
 8000d72:	3802      	subs	r0, #2
 8000d74:	442c      	add	r4, r5
 8000d76:	e747      	b.n	8000c08 <__udivmoddi4+0x14c>
 8000d78:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d7c:	442b      	add	r3, r5
 8000d7e:	e72f      	b.n	8000be0 <__udivmoddi4+0x124>
 8000d80:	4638      	mov	r0, r7
 8000d82:	e708      	b.n	8000b96 <__udivmoddi4+0xda>
 8000d84:	4637      	mov	r7, r6
 8000d86:	e6e9      	b.n	8000b5c <__udivmoddi4+0xa0>

08000d88 <__aeabi_idiv0>:
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop

08000d8c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	4a07      	ldr	r2, [pc, #28]	; (8000db8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000d9c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	4a06      	ldr	r2, [pc, #24]	; (8000dbc <vApplicationGetIdleTaskMemory+0x30>)
 8000da2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2280      	movs	r2, #128	; 0x80
 8000da8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000daa:	bf00      	nop
 8000dac:	3714      	adds	r7, #20
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	20000034 	.word	0x20000034
 8000dbc:	20000088 	.word	0x20000088

08000dc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dc0:	b5b0      	push	{r4, r5, r7, lr}
 8000dc2:	b08e      	sub	sp, #56	; 0x38
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dc6:	f000 fc87 	bl	80016d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dca:	f000 f839 	bl	8000e40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dce:	f000 f8d3 	bl	8000f78 <MX_GPIO_Init>
  MX_DAC_Init();
 8000dd2:	f000 f8a7 	bl	8000f24 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */

  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8000dd6:	2110      	movs	r1, #16
 8000dd8:	4814      	ldr	r0, [pc, #80]	; (8000e2c <main+0x6c>)
 8000dda:	f000 fdc3 	bl	8001964 <HAL_DAC_Start>
  /* definition and creation of defaultTask */
 // osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
  //defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

  /* definition and creation of UpdateAudio */
  osThreadDef(UpdateAudio, StartTask02, osPriorityNormal, 0, 128);
 8000dde:	4b14      	ldr	r3, [pc, #80]	; (8000e30 <main+0x70>)
 8000de0:	f107 041c 	add.w	r4, r7, #28
 8000de4:	461d      	mov	r5, r3
 8000de6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000de8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000dee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UpdateAudioHandle = osThreadCreate(osThread(UpdateAudio), NULL);
 8000df2:	f107 031c 	add.w	r3, r7, #28
 8000df6:	2100      	movs	r1, #0
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f002 f814 	bl	8002e26 <osThreadCreate>
 8000dfe:	4602      	mov	r2, r0
 8000e00:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <main+0x74>)
 8000e02:	601a      	str	r2, [r3, #0]

  /* definition and creation of getInput */
  osThreadDef(getInput, StartTask03, osPriorityNormal, 0, 128);
 8000e04:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <main+0x78>)
 8000e06:	463c      	mov	r4, r7
 8000e08:	461d      	mov	r5, r3
 8000e0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e0e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e12:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  getInputHandle = osThreadCreate(osThread(getInput), NULL);
 8000e16:	463b      	mov	r3, r7
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f002 f803 	bl	8002e26 <osThreadCreate>
 8000e20:	4602      	mov	r2, r0
 8000e22:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <main+0x7c>)
 8000e24:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000e26:	f001 fff7 	bl	8002e18 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e2a:	e7fe      	b.n	8000e2a <main+0x6a>
 8000e2c:	20004060 	.word	0x20004060
 8000e30:	080042ac 	.word	0x080042ac
 8000e34:	20004074 	.word	0x20004074
 8000e38:	080042d4 	.word	0x080042d4
 8000e3c:	200040b8 	.word	0x200040b8

08000e40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b094      	sub	sp, #80	; 0x50
 8000e44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e46:	f107 031c 	add.w	r3, r7, #28
 8000e4a:	2234      	movs	r2, #52	; 0x34
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f003 fa12 	bl	8004278 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e54:	f107 0308 	add.w	r3, r7, #8
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
 8000e62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e64:	2300      	movs	r3, #0
 8000e66:	607b      	str	r3, [r7, #4]
 8000e68:	4b2c      	ldr	r3, [pc, #176]	; (8000f1c <SystemClock_Config+0xdc>)
 8000e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6c:	4a2b      	ldr	r2, [pc, #172]	; (8000f1c <SystemClock_Config+0xdc>)
 8000e6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e72:	6413      	str	r3, [r2, #64]	; 0x40
 8000e74:	4b29      	ldr	r3, [pc, #164]	; (8000f1c <SystemClock_Config+0xdc>)
 8000e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e7c:	607b      	str	r3, [r7, #4]
 8000e7e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e80:	2300      	movs	r3, #0
 8000e82:	603b      	str	r3, [r7, #0]
 8000e84:	4b26      	ldr	r3, [pc, #152]	; (8000f20 <SystemClock_Config+0xe0>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a25      	ldr	r2, [pc, #148]	; (8000f20 <SystemClock_Config+0xe0>)
 8000e8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e8e:	6013      	str	r3, [r2, #0]
 8000e90:	4b23      	ldr	r3, [pc, #140]	; (8000f20 <SystemClock_Config+0xe0>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e98:	603b      	str	r3, [r7, #0]
 8000e9a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ea0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ea4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eaa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000eae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000eb0:	2304      	movs	r3, #4
 8000eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000eb4:	23b4      	movs	r3, #180	; 0xb4
 8000eb6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ec4:	f107 031c 	add.w	r3, r7, #28
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f001 faf5 	bl	80024b8 <HAL_RCC_OscConfig>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ed4:	f000 faca 	bl	800146c <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ed8:	f000 ffc6 	bl	8001e68 <HAL_PWREx_EnableOverDrive>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000ee2:	f000 fac3 	bl	800146c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ee6:	230f      	movs	r3, #15
 8000ee8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eea:	2302      	movs	r3, #2
 8000eec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ef2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ef6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ef8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000efc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000efe:	f107 0308 	add.w	r3, r7, #8
 8000f02:	2105      	movs	r1, #5
 8000f04:	4618      	mov	r0, r3
 8000f06:	f000 ffff 	bl	8001f08 <HAL_RCC_ClockConfig>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000f10:	f000 faac 	bl	800146c <Error_Handler>
  }
}
 8000f14:	bf00      	nop
 8000f16:	3750      	adds	r7, #80	; 0x50
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40023800 	.word	0x40023800
 8000f20:	40007000 	.word	0x40007000

08000f24 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000f2a:	463b      	mov	r3, r7
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 8000f32:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <MX_DAC_Init+0x4c>)
 8000f34:	4a0f      	ldr	r2, [pc, #60]	; (8000f74 <MX_DAC_Init+0x50>)
 8000f36:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000f38:	480d      	ldr	r0, [pc, #52]	; (8000f70 <MX_DAC_Init+0x4c>)
 8000f3a:	f000 fcf1 	bl	8001920 <HAL_DAC_Init>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000f44:	f000 fa92 	bl	800146c <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000f50:	463b      	mov	r3, r7
 8000f52:	2210      	movs	r2, #16
 8000f54:	4619      	mov	r1, r3
 8000f56:	4806      	ldr	r0, [pc, #24]	; (8000f70 <MX_DAC_Init+0x4c>)
 8000f58:	f000 fd6a 	bl	8001a30 <HAL_DAC_ConfigChannel>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000f62:	f000 fa83 	bl	800146c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20004060 	.word	0x20004060
 8000f74:	40007400 	.word	0x40007400

08000f78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08a      	sub	sp, #40	; 0x28
 8000f7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7e:	f107 0314 	add.w	r3, r7, #20
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	609a      	str	r2, [r3, #8]
 8000f8a:	60da      	str	r2, [r3, #12]
 8000f8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	613b      	str	r3, [r7, #16]
 8000f92:	4b38      	ldr	r3, [pc, #224]	; (8001074 <MX_GPIO_Init+0xfc>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	4a37      	ldr	r2, [pc, #220]	; (8001074 <MX_GPIO_Init+0xfc>)
 8000f98:	f043 0304 	orr.w	r3, r3, #4
 8000f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9e:	4b35      	ldr	r3, [pc, #212]	; (8001074 <MX_GPIO_Init+0xfc>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	f003 0304 	and.w	r3, r3, #4
 8000fa6:	613b      	str	r3, [r7, #16]
 8000fa8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	4b31      	ldr	r3, [pc, #196]	; (8001074 <MX_GPIO_Init+0xfc>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a30      	ldr	r2, [pc, #192]	; (8001074 <MX_GPIO_Init+0xfc>)
 8000fb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b2e      	ldr	r3, [pc, #184]	; (8001074 <MX_GPIO_Init+0xfc>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60bb      	str	r3, [r7, #8]
 8000fca:	4b2a      	ldr	r3, [pc, #168]	; (8001074 <MX_GPIO_Init+0xfc>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	4a29      	ldr	r2, [pc, #164]	; (8001074 <MX_GPIO_Init+0xfc>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd6:	4b27      	ldr	r3, [pc, #156]	; (8001074 <MX_GPIO_Init+0xfc>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	60bb      	str	r3, [r7, #8]
 8000fe0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	607b      	str	r3, [r7, #4]
 8000fe6:	4b23      	ldr	r3, [pc, #140]	; (8001074 <MX_GPIO_Init+0xfc>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	4a22      	ldr	r2, [pc, #136]	; (8001074 <MX_GPIO_Init+0xfc>)
 8000fec:	f043 0302 	orr.w	r3, r3, #2
 8000ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff2:	4b20      	ldr	r3, [pc, #128]	; (8001074 <MX_GPIO_Init+0xfc>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	f003 0302 	and.w	r3, r3, #2
 8000ffa:	607b      	str	r3, [r7, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ffe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001002:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001004:	4b1c      	ldr	r3, [pc, #112]	; (8001078 <MX_GPIO_Init+0x100>)
 8001006:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800100c:	f107 0314 	add.w	r3, r7, #20
 8001010:	4619      	mov	r1, r3
 8001012:	481a      	ldr	r0, [pc, #104]	; (800107c <MX_GPIO_Init+0x104>)
 8001014:	f000 fd7e 	bl	8001b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : LU_Pin LL_Pin RL_Pin RU_Pin */
  GPIO_InitStruct.Pin = LU_Pin|LL_Pin|RL_Pin|RU_Pin;
 8001018:	230f      	movs	r3, #15
 800101a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800101c:	2300      	movs	r3, #0
 800101e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001020:	2302      	movs	r3, #2
 8001022:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	4619      	mov	r1, r3
 800102a:	4814      	ldr	r0, [pc, #80]	; (800107c <MX_GPIO_Init+0x104>)
 800102c:	f000 fd72 	bl	8001b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : RD_Pin RR_Pin LD_Pin LR_Pin */
  GPIO_InitStruct.Pin = RD_Pin|RR_Pin|LD_Pin|LR_Pin;
 8001030:	f240 4313 	movw	r3, #1043	; 0x413
 8001034:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001036:	2300      	movs	r3, #0
 8001038:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800103a:	2302      	movs	r3, #2
 800103c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	4619      	mov	r1, r3
 8001044:	480e      	ldr	r0, [pc, #56]	; (8001080 <MX_GPIO_Init+0x108>)
 8001046:	f000 fd65 	bl	8001b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800104a:	2308      	movs	r3, #8
 800104c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800104e:	2312      	movs	r3, #18
 8001050:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001052:	2301      	movs	r3, #1
 8001054:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001056:	2303      	movs	r3, #3
 8001058:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800105a:	2304      	movs	r3, #4
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105e:	f107 0314 	add.w	r3, r7, #20
 8001062:	4619      	mov	r1, r3
 8001064:	4807      	ldr	r0, [pc, #28]	; (8001084 <MX_GPIO_Init+0x10c>)
 8001066:	f000 fd55 	bl	8001b14 <HAL_GPIO_Init>

}
 800106a:	bf00      	nop
 800106c:	3728      	adds	r7, #40	; 0x28
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40023800 	.word	0x40023800
 8001078:	10210000 	.word	0x10210000
 800107c:	40020800 	.word	0x40020800
 8001080:	40020000 	.word	0x40020000
 8001084:	40020400 	.word	0x40020400

08001088 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8001088:	b590      	push	{r4, r7, lr}
 800108a:	b087      	sub	sp, #28
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */

	// set up oscillators
	// 6 oscillators (mass, k, position, velocity)
for(int i =0;i<numOscillators;i++)
 8001090:	2300      	movs	r3, #0
 8001092:	617b      	str	r3, [r7, #20]
 8001094:	e042      	b.n	800111c <StartTask02+0x94>
{
	oscillators[i][0]=1-.1*i;		//mass
 8001096:	6978      	ldr	r0, [r7, #20]
 8001098:	f7ff fa0c 	bl	80004b4 <__aeabi_i2d>
 800109c:	a373      	add	r3, pc, #460	; (adr r3, 800126c <StartTask02+0x1e4>)
 800109e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a2:	f7ff fa71 	bl	8000588 <__aeabi_dmul>
 80010a6:	4603      	mov	r3, r0
 80010a8:	460c      	mov	r4, r1
 80010aa:	461a      	mov	r2, r3
 80010ac:	4623      	mov	r3, r4
 80010ae:	f04f 0000 	mov.w	r0, #0
 80010b2:	4967      	ldr	r1, [pc, #412]	; (8001250 <StartTask02+0x1c8>)
 80010b4:	f7ff f8b0 	bl	8000218 <__aeabi_dsub>
 80010b8:	4603      	mov	r3, r0
 80010ba:	460c      	mov	r4, r1
 80010bc:	4618      	mov	r0, r3
 80010be:	4621      	mov	r1, r4
 80010c0:	f7ff fc94 	bl	80009ec <__aeabi_d2f>
 80010c4:	4601      	mov	r1, r0
 80010c6:	4a63      	ldr	r2, [pc, #396]	; (8001254 <StartTask02+0x1cc>)
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	011b      	lsls	r3, r3, #4
 80010cc:	4413      	add	r3, r2
 80010ce:	6019      	str	r1, [r3, #0]
	oscillators[i][1]=20000+5000*i;	//k
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80010d6:	fb02 f303 	mul.w	r3, r2, r3
 80010da:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 80010de:	3320      	adds	r3, #32
 80010e0:	ee07 3a90 	vmov	s15, r3
 80010e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010e8:	4a5a      	ldr	r2, [pc, #360]	; (8001254 <StartTask02+0x1cc>)
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	011b      	lsls	r3, r3, #4
 80010ee:	4413      	add	r3, r2
 80010f0:	3304      	adds	r3, #4
 80010f2:	edc3 7a00 	vstr	s15, [r3]
	oscillators[i][2]=0;
 80010f6:	4a57      	ldr	r2, [pc, #348]	; (8001254 <StartTask02+0x1cc>)
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	011b      	lsls	r3, r3, #4
 80010fc:	4413      	add	r3, r2
 80010fe:	3308      	adds	r3, #8
 8001100:	f04f 0200 	mov.w	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
	oscillators[i][3]=0;
 8001106:	4a53      	ldr	r2, [pc, #332]	; (8001254 <StartTask02+0x1cc>)
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	011b      	lsls	r3, r3, #4
 800110c:	4413      	add	r3, r2
 800110e:	330c      	adds	r3, #12
 8001110:	f04f 0200 	mov.w	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
for(int i =0;i<numOscillators;i++)
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	3301      	adds	r3, #1
 800111a:	617b      	str	r3, [r7, #20]
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	2b07      	cmp	r3, #7
 8001120:	ddb9      	ble.n	8001096 <StartTask02+0xe>
}

	float value;
	float dampening=.99999;
 8001122:	4b4d      	ldr	r3, [pc, #308]	; (8001258 <StartTask02+0x1d0>)
 8001124:	60bb      	str	r3, [r7, #8]
  for(;;)
  {


	  value=0;
 8001126:	f04f 0300 	mov.w	r3, #0
 800112a:	613b      	str	r3, [r7, #16]
		// 6 oscillators (mass, k, position, velocity)
	for(int i =0;i<numOscillators;i++)
 800112c:	2300      	movs	r3, #0
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	e062      	b.n	80011f8 <StartTask02+0x170>
	{
		oscillators[i][3]=dampening*oscillators[i][3]+((-oscillators[i][2]*oscillators[i][1])/oscillators[i][0])*dt;		//velocity
 8001132:	4a48      	ldr	r2, [pc, #288]	; (8001254 <StartTask02+0x1cc>)
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	011b      	lsls	r3, r3, #4
 8001138:	4413      	add	r3, r2
 800113a:	330c      	adds	r3, #12
 800113c:	ed93 7a00 	vldr	s14, [r3]
 8001140:	edd7 7a02 	vldr	s15, [r7, #8]
 8001144:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001148:	4a42      	ldr	r2, [pc, #264]	; (8001254 <StartTask02+0x1cc>)
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	011b      	lsls	r3, r3, #4
 800114e:	4413      	add	r3, r2
 8001150:	3308      	adds	r3, #8
 8001152:	edd3 7a00 	vldr	s15, [r3]
 8001156:	eef1 6a67 	vneg.f32	s13, s15
 800115a:	4a3e      	ldr	r2, [pc, #248]	; (8001254 <StartTask02+0x1cc>)
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	011b      	lsls	r3, r3, #4
 8001160:	4413      	add	r3, r2
 8001162:	3304      	adds	r3, #4
 8001164:	edd3 7a00 	vldr	s15, [r3]
 8001168:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800116c:	4a39      	ldr	r2, [pc, #228]	; (8001254 <StartTask02+0x1cc>)
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	011b      	lsls	r3, r3, #4
 8001172:	4413      	add	r3, r2
 8001174:	edd3 7a00 	vldr	s15, [r3]
 8001178:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800117c:	4b37      	ldr	r3, [pc, #220]	; (800125c <StartTask02+0x1d4>)
 800117e:	edd3 7a00 	vldr	s15, [r3]
 8001182:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001186:	ee77 7a27 	vadd.f32	s15, s14, s15
 800118a:	4a32      	ldr	r2, [pc, #200]	; (8001254 <StartTask02+0x1cc>)
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	011b      	lsls	r3, r3, #4
 8001190:	4413      	add	r3, r2
 8001192:	330c      	adds	r3, #12
 8001194:	edc3 7a00 	vstr	s15, [r3]
		oscillators[i][2]=oscillators[i][2]+oscillators[i][3]*dt;	//position
 8001198:	4a2e      	ldr	r2, [pc, #184]	; (8001254 <StartTask02+0x1cc>)
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	011b      	lsls	r3, r3, #4
 800119e:	4413      	add	r3, r2
 80011a0:	3308      	adds	r3, #8
 80011a2:	ed93 7a00 	vldr	s14, [r3]
 80011a6:	4a2b      	ldr	r2, [pc, #172]	; (8001254 <StartTask02+0x1cc>)
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	011b      	lsls	r3, r3, #4
 80011ac:	4413      	add	r3, r2
 80011ae:	330c      	adds	r3, #12
 80011b0:	edd3 6a00 	vldr	s13, [r3]
 80011b4:	4b29      	ldr	r3, [pc, #164]	; (800125c <StartTask02+0x1d4>)
 80011b6:	edd3 7a00 	vldr	s15, [r3]
 80011ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011c2:	4a24      	ldr	r2, [pc, #144]	; (8001254 <StartTask02+0x1cc>)
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	011b      	lsls	r3, r3, #4
 80011c8:	4413      	add	r3, r2
 80011ca:	3308      	adds	r3, #8
 80011cc:	edc3 7a00 	vstr	s15, [r3]
		value=value+oscillators[i][2]/numOscillators;
 80011d0:	4a20      	ldr	r2, [pc, #128]	; (8001254 <StartTask02+0x1cc>)
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	011b      	lsls	r3, r3, #4
 80011d6:	4413      	add	r3, r2
 80011d8:	3308      	adds	r3, #8
 80011da:	ed93 7a00 	vldr	s14, [r3]
 80011de:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80011e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011e6:	ed97 7a04 	vldr	s14, [r7, #16]
 80011ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ee:	edc7 7a04 	vstr	s15, [r7, #16]
	for(int i =0;i<numOscillators;i++)
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	3301      	adds	r3, #1
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	2b07      	cmp	r3, #7
 80011fc:	dd99      	ble.n	8001132 <StartTask02+0xaa>





	   val= ((value/20)*(0xffff+1)/3.3);
 80011fe:	ed97 7a04 	vldr	s14, [r7, #16]
 8001202:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8001206:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800120a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001260 <StartTask02+0x1d8>
 800120e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001212:	ee17 0a90 	vmov	r0, s15
 8001216:	f7ff f95f 	bl	80004d8 <__aeabi_f2d>
 800121a:	a30b      	add	r3, pc, #44	; (adr r3, 8001248 <StartTask02+0x1c0>)
 800121c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001220:	f7ff fadc 	bl	80007dc <__aeabi_ddiv>
 8001224:	4603      	mov	r3, r0
 8001226:	460c      	mov	r4, r1
 8001228:	4618      	mov	r0, r3
 800122a:	4621      	mov	r1, r4
 800122c:	f7ff fbbe 	bl	80009ac <__aeabi_d2uiz>
 8001230:	4602      	mov	r2, r0
 8001232:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <StartTask02+0x1dc>)
 8001234:	601a      	str	r2, [r3, #0]

	  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, val);
 8001236:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <StartTask02+0x1dc>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2200      	movs	r2, #0
 800123c:	2110      	movs	r1, #16
 800123e:	480a      	ldr	r0, [pc, #40]	; (8001268 <StartTask02+0x1e0>)
 8001240:	f000 fc43 	bl	8001aca <HAL_DAC_SetValue>
	  value=0;
 8001244:	e76f      	b.n	8001126 <StartTask02+0x9e>
 8001246:	bf00      	nop
 8001248:	66666666 	.word	0x66666666
 800124c:	400a6666 	.word	0x400a6666
 8001250:	3ff00000 	.word	0x3ff00000
 8001254:	2000028c 	.word	0x2000028c
 8001258:	3f7fff58 	.word	0x3f7fff58
 800125c:	20000004 	.word	0x20000004
 8001260:	47800000 	.word	0x47800000
 8001264:	2000405c 	.word	0x2000405c
 8001268:	20004060 	.word	0x20004060
 800126c:	9999999a 	.word	0x9999999a
 8001270:	3fb99999 	.word	0x3fb99999
 8001274:	00000000 	.word	0x00000000

08001278 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8001278:	b590      	push	{r4, r7, lr}
 800127a:	b087      	sub	sp, #28
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */

	const maxK=100000000;
 8001280:	4b69      	ldr	r3, [pc, #420]	; (8001428 <StartTask03+0x1b0>)
 8001282:	60fb      	str	r3, [r7, #12]
	const minK=25000;
 8001284:	f246 13a8 	movw	r3, #25000	; 0x61a8
 8001288:	60bb      	str	r3, [r7, #8]
	_Bool prevState=0;
 800128a:	2300      	movs	r3, #0
 800128c:	75fb      	strb	r3, [r7, #23]
	_Bool prevState2=0;
 800128e:	2300      	movs	r3, #0
 8001290:	75bb      	strb	r3, [r7, #22]
	int oscCount=0;
 8001292:	2300      	movs	r3, #0
 8001294:	613b      	str	r3, [r7, #16]

  for(;;)
  {
	  if(HAL_GPIO_ReadPin(GPIOC,LL_Pin)&&k>minK)
 8001296:	2102      	movs	r1, #2
 8001298:	4864      	ldr	r0, [pc, #400]	; (800142c <StartTask03+0x1b4>)
 800129a:	f000 fdcd 	bl	8001e38 <HAL_GPIO_ReadPin>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d022      	beq.n	80012ea <StartTask03+0x72>
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	ee07 3a90 	vmov	s15, r3
 80012aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012ae:	4b60      	ldr	r3, [pc, #384]	; (8001430 <StartTask03+0x1b8>)
 80012b0:	edd3 7a00 	vldr	s15, [r3]
 80012b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012bc:	d515      	bpl.n	80012ea <StartTask03+0x72>
	  {

		  k=k/1.1;
 80012be:	4b5c      	ldr	r3, [pc, #368]	; (8001430 <StartTask03+0x1b8>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff f908 	bl	80004d8 <__aeabi_f2d>
 80012c8:	a355      	add	r3, pc, #340	; (adr r3, 8001420 <StartTask03+0x1a8>)
 80012ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ce:	f7ff fa85 	bl	80007dc <__aeabi_ddiv>
 80012d2:	4603      	mov	r3, r0
 80012d4:	460c      	mov	r4, r1
 80012d6:	4618      	mov	r0, r3
 80012d8:	4621      	mov	r1, r4
 80012da:	f7ff fb87 	bl	80009ec <__aeabi_d2f>
 80012de:	4602      	mov	r2, r0
 80012e0:	4b53      	ldr	r3, [pc, #332]	; (8001430 <StartTask03+0x1b8>)
 80012e2:	601a      	str	r2, [r3, #0]
		  osDelay(10);
 80012e4:	200a      	movs	r0, #10
 80012e6:	f001 fdea 	bl	8002ebe <osDelay>

	  }

	  if(HAL_GPIO_ReadPin(GPIOC,LU_Pin)&&k<maxK)
 80012ea:	2101      	movs	r1, #1
 80012ec:	484f      	ldr	r0, [pc, #316]	; (800142c <StartTask03+0x1b4>)
 80012ee:	f000 fda3 	bl	8001e38 <HAL_GPIO_ReadPin>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d022      	beq.n	800133e <StartTask03+0xc6>
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	ee07 3a90 	vmov	s15, r3
 80012fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001302:	4b4b      	ldr	r3, [pc, #300]	; (8001430 <StartTask03+0x1b8>)
 8001304:	edd3 7a00 	vldr	s15, [r3]
 8001308:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800130c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001310:	dd15      	ble.n	800133e <StartTask03+0xc6>
	  	  {

		  k=k*1.1;
 8001312:	4b47      	ldr	r3, [pc, #284]	; (8001430 <StartTask03+0x1b8>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff f8de 	bl	80004d8 <__aeabi_f2d>
 800131c:	a340      	add	r3, pc, #256	; (adr r3, 8001420 <StartTask03+0x1a8>)
 800131e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001322:	f7ff f931 	bl	8000588 <__aeabi_dmul>
 8001326:	4603      	mov	r3, r0
 8001328:	460c      	mov	r4, r1
 800132a:	4618      	mov	r0, r3
 800132c:	4621      	mov	r1, r4
 800132e:	f7ff fb5d 	bl	80009ec <__aeabi_d2f>
 8001332:	4602      	mov	r2, r0
 8001334:	4b3e      	ldr	r3, [pc, #248]	; (8001430 <StartTask03+0x1b8>)
 8001336:	601a      	str	r2, [r3, #0]
		  osDelay(10);
 8001338:	200a      	movs	r0, #10
 800133a:	f001 fdc0 	bl	8002ebe <osDelay>

	  	  }



	  if(HAL_GPIO_ReadPin(GPIOA,RD_Pin))
 800133e:	2101      	movs	r1, #1
 8001340:	483c      	ldr	r0, [pc, #240]	; (8001434 <StartTask03+0x1bc>)
 8001342:	f000 fd79 	bl	8001e38 <HAL_GPIO_ReadPin>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d024      	beq.n	8001396 <StartTask03+0x11e>
	  	  {
		  if(prevState==0)
 800134c:	7dfb      	ldrb	r3, [r7, #23]
 800134e:	f083 0301 	eor.w	r3, r3, #1
 8001352:	b2db      	uxtb	r3, r3
 8001354:	2b00      	cmp	r3, #0
 8001356:	d01b      	beq.n	8001390 <StartTask03+0x118>
		  {
			  oscillators[oscCount][1]=k;
 8001358:	4b35      	ldr	r3, [pc, #212]	; (8001430 <StartTask03+0x1b8>)
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	4936      	ldr	r1, [pc, #216]	; (8001438 <StartTask03+0x1c0>)
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	011b      	lsls	r3, r3, #4
 8001362:	440b      	add	r3, r1
 8001364:	3304      	adds	r3, #4
 8001366:	601a      	str	r2, [r3, #0]
			  oscillators[oscCount][3]=3000;	//velocity
 8001368:	4a33      	ldr	r2, [pc, #204]	; (8001438 <StartTask03+0x1c0>)
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	011b      	lsls	r3, r3, #4
 800136e:	4413      	add	r3, r2
 8001370:	330c      	adds	r3, #12
 8001372:	4a32      	ldr	r2, [pc, #200]	; (800143c <StartTask03+0x1c4>)
 8001374:	601a      	str	r2, [r3, #0]
			  oscCount=(oscCount+1)%numOscillators;
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	3301      	adds	r3, #1
 800137a:	425a      	negs	r2, r3
 800137c:	f003 0307 	and.w	r3, r3, #7
 8001380:	f002 0207 	and.w	r2, r2, #7
 8001384:	bf58      	it	pl
 8001386:	4253      	negpl	r3, r2
 8001388:	613b      	str	r3, [r7, #16]
			  osDelay(4);
 800138a:	2004      	movs	r0, #4
 800138c:	f001 fd97 	bl	8002ebe <osDelay>
		  }
		  prevState=1;
 8001390:	2301      	movs	r3, #1
 8001392:	75fb      	strb	r3, [r7, #23]
 8001394:	e001      	b.n	800139a <StartTask03+0x122>
	  	  }
	  else
	  {
		  prevState=0;
 8001396:	2300      	movs	r3, #0
 8001398:	75fb      	strb	r3, [r7, #23]
	  }



	  if(HAL_GPIO_ReadPin(GPIOA,RR_Pin))
 800139a:	2102      	movs	r1, #2
 800139c:	4825      	ldr	r0, [pc, #148]	; (8001434 <StartTask03+0x1bc>)
 800139e:	f000 fd4b 	bl	8001e38 <HAL_GPIO_ReadPin>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d00b      	beq.n	80013c0 <StartTask03+0x148>
	  	  	  {
	  		  if(prevState2==0)
 80013a8:	7dbb      	ldrb	r3, [r7, #22]
 80013aa:	f083 0301 	eor.w	r3, r3, #1
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d002      	beq.n	80013ba <StartTask03+0x142>
	  		  {
	  			 position2=5;
 80013b4:	4b22      	ldr	r3, [pc, #136]	; (8001440 <StartTask03+0x1c8>)
 80013b6:	4a23      	ldr	r2, [pc, #140]	; (8001444 <StartTask03+0x1cc>)
 80013b8:	601a      	str	r2, [r3, #0]

	  		  }
	  		  prevState2=1;
 80013ba:	2301      	movs	r3, #1
 80013bc:	75bb      	strb	r3, [r7, #22]
 80013be:	e001      	b.n	80013c4 <StartTask03+0x14c>
	  	  	  }
	  	  else
	  	  {
	  		  prevState2=0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	75bb      	strb	r3, [r7, #22]
	  	  }




	  if(HAL_GPIO_ReadPin(GPIOC,RU_Pin))
 80013c4:	2108      	movs	r1, #8
 80013c6:	4819      	ldr	r0, [pc, #100]	; (800142c <StartTask03+0x1b4>)
 80013c8:	f000 fd36 	bl	8001e38 <HAL_GPIO_ReadPin>
	  {

	  }


	  if(HAL_GPIO_ReadPin(GPIOC,RL_Pin))
 80013cc:	2104      	movs	r1, #4
 80013ce:	4817      	ldr	r0, [pc, #92]	; (800142c <StartTask03+0x1b4>)
 80013d0:	f000 fd32 	bl	8001e38 <HAL_GPIO_ReadPin>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d01b      	beq.n	8001412 <StartTask03+0x19a>
	  {


		  	  	oscillators[oscCount][1]=k;
 80013da:	4b15      	ldr	r3, [pc, #84]	; (8001430 <StartTask03+0x1b8>)
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	4916      	ldr	r1, [pc, #88]	; (8001438 <StartTask03+0x1c0>)
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	011b      	lsls	r3, r3, #4
 80013e4:	440b      	add	r3, r1
 80013e6:	3304      	adds	r3, #4
 80013e8:	601a      	str	r2, [r3, #0]
		  		oscillators[oscCount][3]=3000;	//velocity
 80013ea:	4a13      	ldr	r2, [pc, #76]	; (8001438 <StartTask03+0x1c0>)
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	011b      	lsls	r3, r3, #4
 80013f0:	4413      	add	r3, r2
 80013f2:	330c      	adds	r3, #12
 80013f4:	4a11      	ldr	r2, [pc, #68]	; (800143c <StartTask03+0x1c4>)
 80013f6:	601a      	str	r2, [r3, #0]
		  		oscCount=(oscCount+1)%numOscillators;
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	3301      	adds	r3, #1
 80013fc:	425a      	negs	r2, r3
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	f002 0207 	and.w	r2, r2, #7
 8001406:	bf58      	it	pl
 8001408:	4253      	negpl	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
				 osDelay(4);
 800140c:	2004      	movs	r0, #4
 800140e:	f001 fd56 	bl	8002ebe <osDelay>
	  }




	  osDelay(4);
 8001412:	2004      	movs	r0, #4
 8001414:	f001 fd53 	bl	8002ebe <osDelay>
	  if(HAL_GPIO_ReadPin(GPIOC,LL_Pin)&&k>minK)
 8001418:	e73d      	b.n	8001296 <StartTask03+0x1e>
 800141a:	bf00      	nop
 800141c:	f3af 8000 	nop.w
 8001420:	9999999a 	.word	0x9999999a
 8001424:	3ff19999 	.word	0x3ff19999
 8001428:	05f5e100 	.word	0x05f5e100
 800142c:	40020800 	.word	0x40020800
 8001430:	20000000 	.word	0x20000000
 8001434:	40020000 	.word	0x40020000
 8001438:	2000028c 	.word	0x2000028c
 800143c:	453b8000 	.word	0x453b8000
 8001440:	20000288 	.word	0x20000288
 8001444:	40a00000 	.word	0x40a00000

08001448 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a04      	ldr	r2, [pc, #16]	; (8001468 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d101      	bne.n	800145e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800145a:	f000 f95f 	bl	800171c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40010000 	.word	0x40010000

0800146c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
	...

0800147c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	607b      	str	r3, [r7, #4]
 8001486:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <HAL_MspInit+0x54>)
 8001488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148a:	4a11      	ldr	r2, [pc, #68]	; (80014d0 <HAL_MspInit+0x54>)
 800148c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001490:	6453      	str	r3, [r2, #68]	; 0x44
 8001492:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <HAL_MspInit+0x54>)
 8001494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001496:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800149a:	607b      	str	r3, [r7, #4]
 800149c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	603b      	str	r3, [r7, #0]
 80014a2:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <HAL_MspInit+0x54>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	4a0a      	ldr	r2, [pc, #40]	; (80014d0 <HAL_MspInit+0x54>)
 80014a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ac:	6413      	str	r3, [r2, #64]	; 0x40
 80014ae:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <HAL_MspInit+0x54>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b6:	603b      	str	r3, [r7, #0]
 80014b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014ba:	2200      	movs	r2, #0
 80014bc:	210f      	movs	r1, #15
 80014be:	f06f 0001 	mvn.w	r0, #1
 80014c2:	f000 fa03 	bl	80018cc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40023800 	.word	0x40023800

080014d4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08a      	sub	sp, #40	; 0x28
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a17      	ldr	r2, [pc, #92]	; (8001550 <HAL_DAC_MspInit+0x7c>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d127      	bne.n	8001546 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	613b      	str	r3, [r7, #16]
 80014fa:	4b16      	ldr	r3, [pc, #88]	; (8001554 <HAL_DAC_MspInit+0x80>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	4a15      	ldr	r2, [pc, #84]	; (8001554 <HAL_DAC_MspInit+0x80>)
 8001500:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001504:	6413      	str	r3, [r2, #64]	; 0x40
 8001506:	4b13      	ldr	r3, [pc, #76]	; (8001554 <HAL_DAC_MspInit+0x80>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800150e:	613b      	str	r3, [r7, #16]
 8001510:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <HAL_DAC_MspInit+0x80>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	4a0e      	ldr	r2, [pc, #56]	; (8001554 <HAL_DAC_MspInit+0x80>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	6313      	str	r3, [r2, #48]	; 0x30
 8001522:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <HAL_DAC_MspInit+0x80>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA5     ------> DAC_OUT2 
    */
    GPIO_InitStruct.Pin = DAC_OUT_Pin;
 800152e:	2320      	movs	r3, #32
 8001530:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001532:	2303      	movs	r3, #3
 8001534:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DAC_OUT_GPIO_Port, &GPIO_InitStruct);
 800153a:	f107 0314 	add.w	r3, r7, #20
 800153e:	4619      	mov	r1, r3
 8001540:	4805      	ldr	r0, [pc, #20]	; (8001558 <HAL_DAC_MspInit+0x84>)
 8001542:	f000 fae7 	bl	8001b14 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001546:	bf00      	nop
 8001548:	3728      	adds	r7, #40	; 0x28
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40007400 	.word	0x40007400
 8001554:	40023800 	.word	0x40023800
 8001558:	40020000 	.word	0x40020000

0800155c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08c      	sub	sp, #48	; 0x30
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001564:	2300      	movs	r3, #0
 8001566:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001568:	2300      	movs	r3, #0
 800156a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 800156c:	2200      	movs	r2, #0
 800156e:	6879      	ldr	r1, [r7, #4]
 8001570:	2019      	movs	r0, #25
 8001572:	f000 f9ab 	bl	80018cc <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8001576:	2019      	movs	r0, #25
 8001578:	f000 f9c4 	bl	8001904 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800157c:	2300      	movs	r3, #0
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	4b1f      	ldr	r3, [pc, #124]	; (8001600 <HAL_InitTick+0xa4>)
 8001582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001584:	4a1e      	ldr	r2, [pc, #120]	; (8001600 <HAL_InitTick+0xa4>)
 8001586:	f043 0301 	orr.w	r3, r3, #1
 800158a:	6453      	str	r3, [r2, #68]	; 0x44
 800158c:	4b1c      	ldr	r3, [pc, #112]	; (8001600 <HAL_InitTick+0xa4>)
 800158e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001598:	f107 0210 	add.w	r2, r7, #16
 800159c:	f107 0314 	add.w	r3, r7, #20
 80015a0:	4611      	mov	r1, r2
 80015a2:	4618      	mov	r0, r3
 80015a4:	f000 fdb6 	bl	8002114 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80015a8:	f000 fda0 	bl	80020ec <HAL_RCC_GetPCLK2Freq>
 80015ac:	4603      	mov	r3, r0
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80015b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015b4:	4a13      	ldr	r2, [pc, #76]	; (8001604 <HAL_InitTick+0xa8>)
 80015b6:	fba2 2303 	umull	r2, r3, r2, r3
 80015ba:	0c9b      	lsrs	r3, r3, #18
 80015bc:	3b01      	subs	r3, #1
 80015be:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80015c0:	4b11      	ldr	r3, [pc, #68]	; (8001608 <HAL_InitTick+0xac>)
 80015c2:	4a12      	ldr	r2, [pc, #72]	; (800160c <HAL_InitTick+0xb0>)
 80015c4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80015c6:	4b10      	ldr	r3, [pc, #64]	; (8001608 <HAL_InitTick+0xac>)
 80015c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015cc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80015ce:	4a0e      	ldr	r2, [pc, #56]	; (8001608 <HAL_InitTick+0xac>)
 80015d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80015d4:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <HAL_InitTick+0xac>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015da:	4b0b      	ldr	r3, [pc, #44]	; (8001608 <HAL_InitTick+0xac>)
 80015dc:	2200      	movs	r2, #0
 80015de:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80015e0:	4809      	ldr	r0, [pc, #36]	; (8001608 <HAL_InitTick+0xac>)
 80015e2:	f001 f9c3 	bl	800296c <HAL_TIM_Base_Init>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d104      	bne.n	80015f6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80015ec:	4806      	ldr	r0, [pc, #24]	; (8001608 <HAL_InitTick+0xac>)
 80015ee:	f001 f9f2 	bl	80029d6 <HAL_TIM_Base_Start_IT>
 80015f2:	4603      	mov	r3, r0
 80015f4:	e000      	b.n	80015f8 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3730      	adds	r7, #48	; 0x30
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40023800 	.word	0x40023800
 8001604:	431bde83 	.word	0x431bde83
 8001608:	200040bc 	.word	0x200040bc
 800160c:	40010000 	.word	0x40010000

08001610 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001614:	bf00      	nop
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800161e:	b480      	push	{r7}
 8001620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001622:	e7fe      	b.n	8001622 <HardFault_Handler+0x4>

08001624 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001628:	e7fe      	b.n	8001628 <MemManage_Handler+0x4>

0800162a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800162a:	b480      	push	{r7}
 800162c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800162e:	e7fe      	b.n	800162e <BusFault_Handler+0x4>

08001630 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001634:	e7fe      	b.n	8001634 <UsageFault_Handler+0x4>

08001636 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001636:	b480      	push	{r7}
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001648:	4802      	ldr	r0, [pc, #8]	; (8001654 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800164a:	f001 f9e8 	bl	8002a1e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	200040bc 	.word	0x200040bc

08001658 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800165c:	4b08      	ldr	r3, [pc, #32]	; (8001680 <SystemInit+0x28>)
 800165e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001662:	4a07      	ldr	r2, [pc, #28]	; (8001680 <SystemInit+0x28>)
 8001664:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001668:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800166c:	4b04      	ldr	r3, [pc, #16]	; (8001680 <SystemInit+0x28>)
 800166e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001672:	609a      	str	r2, [r3, #8]
#endif
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 8001684:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016bc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001688:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800168a:	e003      	b.n	8001694 <LoopCopyDataInit>

0800168c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800168c:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800168e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001690:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001692:	3104      	adds	r1, #4

08001694 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001694:	480b      	ldr	r0, [pc, #44]	; (80016c4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001696:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001698:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800169a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800169c:	d3f6      	bcc.n	800168c <CopyDataInit>
  ldr  r2, =_sbss
 800169e:	4a0b      	ldr	r2, [pc, #44]	; (80016cc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80016a0:	e002      	b.n	80016a8 <LoopFillZerobss>

080016a2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80016a2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80016a4:	f842 3b04 	str.w	r3, [r2], #4

080016a8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80016a8:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80016aa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80016ac:	d3f9      	bcc.n	80016a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016ae:	f7ff ffd3 	bl	8001658 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016b2:	f002 fdbd 	bl	8004230 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016b6:	f7ff fb83 	bl	8000dc0 <main>
  bx  lr    
 80016ba:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 80016bc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80016c0:	08004320 	.word	0x08004320
  ldr  r0, =_sdata
 80016c4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80016c8:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 80016cc:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 80016d0:	20004100 	.word	0x20004100

080016d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016d4:	e7fe      	b.n	80016d4 <ADC_IRQHandler>
	...

080016d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016dc:	4b0e      	ldr	r3, [pc, #56]	; (8001718 <HAL_Init+0x40>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a0d      	ldr	r2, [pc, #52]	; (8001718 <HAL_Init+0x40>)
 80016e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016e8:	4b0b      	ldr	r3, [pc, #44]	; (8001718 <HAL_Init+0x40>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a0a      	ldr	r2, [pc, #40]	; (8001718 <HAL_Init+0x40>)
 80016ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016f4:	4b08      	ldr	r3, [pc, #32]	; (8001718 <HAL_Init+0x40>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a07      	ldr	r2, [pc, #28]	; (8001718 <HAL_Init+0x40>)
 80016fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001700:	2003      	movs	r0, #3
 8001702:	f000 f8d8 	bl	80018b6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001706:	2000      	movs	r0, #0
 8001708:	f7ff ff28 	bl	800155c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800170c:	f7ff feb6 	bl	800147c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40023c00 	.word	0x40023c00

0800171c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001720:	4b06      	ldr	r3, [pc, #24]	; (800173c <HAL_IncTick+0x20>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	461a      	mov	r2, r3
 8001726:	4b06      	ldr	r3, [pc, #24]	; (8001740 <HAL_IncTick+0x24>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4413      	add	r3, r2
 800172c:	4a04      	ldr	r2, [pc, #16]	; (8001740 <HAL_IncTick+0x24>)
 800172e:	6013      	str	r3, [r2, #0]
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	20000010 	.word	0x20000010
 8001740:	200040fc 	.word	0x200040fc

08001744 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  return uwTick;
 8001748:	4b03      	ldr	r3, [pc, #12]	; (8001758 <HAL_GetTick+0x14>)
 800174a:	681b      	ldr	r3, [r3, #0]
}
 800174c:	4618      	mov	r0, r3
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	200040fc 	.word	0x200040fc

0800175c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f003 0307 	and.w	r3, r3, #7
 800176a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800176c:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <__NVIC_SetPriorityGrouping+0x44>)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001772:	68ba      	ldr	r2, [r7, #8]
 8001774:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001778:	4013      	ands	r3, r2
 800177a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001784:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800178c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800178e:	4a04      	ldr	r2, [pc, #16]	; (80017a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	60d3      	str	r3, [r2, #12]
}
 8001794:	bf00      	nop
 8001796:	3714      	adds	r7, #20
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	e000ed00 	.word	0xe000ed00

080017a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017a8:	4b04      	ldr	r3, [pc, #16]	; (80017bc <__NVIC_GetPriorityGrouping+0x18>)
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	0a1b      	lsrs	r3, r3, #8
 80017ae:	f003 0307 	and.w	r3, r3, #7
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	db0b      	blt.n	80017ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	f003 021f 	and.w	r2, r3, #31
 80017d8:	4907      	ldr	r1, [pc, #28]	; (80017f8 <__NVIC_EnableIRQ+0x38>)
 80017da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017de:	095b      	lsrs	r3, r3, #5
 80017e0:	2001      	movs	r0, #1
 80017e2:	fa00 f202 	lsl.w	r2, r0, r2
 80017e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	e000e100 	.word	0xe000e100

080017fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	6039      	str	r1, [r7, #0]
 8001806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180c:	2b00      	cmp	r3, #0
 800180e:	db0a      	blt.n	8001826 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	b2da      	uxtb	r2, r3
 8001814:	490c      	ldr	r1, [pc, #48]	; (8001848 <__NVIC_SetPriority+0x4c>)
 8001816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181a:	0112      	lsls	r2, r2, #4
 800181c:	b2d2      	uxtb	r2, r2
 800181e:	440b      	add	r3, r1
 8001820:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001824:	e00a      	b.n	800183c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	b2da      	uxtb	r2, r3
 800182a:	4908      	ldr	r1, [pc, #32]	; (800184c <__NVIC_SetPriority+0x50>)
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	f003 030f 	and.w	r3, r3, #15
 8001832:	3b04      	subs	r3, #4
 8001834:	0112      	lsls	r2, r2, #4
 8001836:	b2d2      	uxtb	r2, r2
 8001838:	440b      	add	r3, r1
 800183a:	761a      	strb	r2, [r3, #24]
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	e000e100 	.word	0xe000e100
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001850:	b480      	push	{r7}
 8001852:	b089      	sub	sp, #36	; 0x24
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	f1c3 0307 	rsb	r3, r3, #7
 800186a:	2b04      	cmp	r3, #4
 800186c:	bf28      	it	cs
 800186e:	2304      	movcs	r3, #4
 8001870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	3304      	adds	r3, #4
 8001876:	2b06      	cmp	r3, #6
 8001878:	d902      	bls.n	8001880 <NVIC_EncodePriority+0x30>
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	3b03      	subs	r3, #3
 800187e:	e000      	b.n	8001882 <NVIC_EncodePriority+0x32>
 8001880:	2300      	movs	r3, #0
 8001882:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001884:	f04f 32ff 	mov.w	r2, #4294967295
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43da      	mvns	r2, r3
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	401a      	ands	r2, r3
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001898:	f04f 31ff 	mov.w	r1, #4294967295
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	fa01 f303 	lsl.w	r3, r1, r3
 80018a2:	43d9      	mvns	r1, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a8:	4313      	orrs	r3, r2
         );
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3724      	adds	r7, #36	; 0x24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b082      	sub	sp, #8
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f7ff ff4c 	bl	800175c <__NVIC_SetPriorityGrouping>
}
 80018c4:	bf00      	nop
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
 80018d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018da:	2300      	movs	r3, #0
 80018dc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018de:	f7ff ff61 	bl	80017a4 <__NVIC_GetPriorityGrouping>
 80018e2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	68b9      	ldr	r1, [r7, #8]
 80018e8:	6978      	ldr	r0, [r7, #20]
 80018ea:	f7ff ffb1 	bl	8001850 <NVIC_EncodePriority>
 80018ee:	4602      	mov	r2, r0
 80018f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018f4:	4611      	mov	r1, r2
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff ff80 	bl	80017fc <__NVIC_SetPriority>
}
 80018fc:	bf00      	nop
 80018fe:	3718      	adds	r7, #24
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800190e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff ff54 	bl	80017c0 <__NVIC_EnableIRQ>
}
 8001918:	bf00      	nop
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d101      	bne.n	8001932 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e014      	b.n	800195c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	791b      	ldrb	r3, [r3, #4]
 8001936:	b2db      	uxtb	r3, r3
 8001938:	2b00      	cmp	r3, #0
 800193a:	d105      	bne.n	8001948 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f7ff fdc6 	bl	80014d4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2202      	movs	r2, #2
 800194c:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2201      	movs	r2, #1
 8001958:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800196e:	2300      	movs	r3, #0
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	2300      	movs	r3, #0
 8001974:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	795b      	ldrb	r3, [r3, #5]
 800197a:	2b01      	cmp	r3, #1
 800197c:	d101      	bne.n	8001982 <HAL_DAC_Start+0x1e>
 800197e:	2302      	movs	r3, #2
 8001980:	e050      	b.n	8001a24 <HAL_DAC_Start+0xc0>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2201      	movs	r2, #1
 8001986:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2202      	movs	r2, #2
 800198c:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	6819      	ldr	r1, [r3, #0]
 8001994:	2201      	movs	r2, #1
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	409a      	lsls	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	430a      	orrs	r2, r1
 80019a0:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d11a      	bne.n	80019de <HAL_DAC_Start+0x7a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0304 	and.w	r3, r3, #4
 80019b2:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80019be:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2b04      	cmp	r3, #4
 80019c4:	d127      	bne.n	8001a16 <HAL_DAC_Start+0xb2>
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	2b38      	cmp	r3, #56	; 0x38
 80019ca:	d124      	bne.n	8001a16 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	685a      	ldr	r2, [r3, #4]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f042 0201 	orr.w	r2, r2, #1
 80019da:	605a      	str	r2, [r3, #4]
 80019dc:	e01b      	b.n	8001a16 <HAL_DAC_Start+0xb2>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019e8:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 80019f4:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80019fc:	d10b      	bne.n	8001a16 <HAL_DAC_Start+0xb2>
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8001a04:	d107      	bne.n	8001a16 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	685a      	ldr	r2, [r3, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f042 0202 	orr.w	r2, r2, #2
 8001a14:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8001a22:	2300      	movs	r3, #0
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3714      	adds	r7, #20
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b087      	sub	sp, #28
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	617b      	str	r3, [r7, #20]
 8001a40:	2300      	movs	r3, #0
 8001a42:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	795b      	ldrb	r3, [r3, #5]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d101      	bne.n	8001a50 <HAL_DAC_ConfigChannel+0x20>
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	e036      	b.n	8001abe <HAL_DAC_ConfigChannel+0x8e>
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2201      	movs	r2, #1
 8001a54:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2202      	movs	r2, #2
 8001a5a:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001a64:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	697a      	ldr	r2, [r7, #20]
 8001a72:	4013      	ands	r3, r2
 8001a74:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	697a      	ldr	r2, [r7, #20]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	697a      	ldr	r2, [r7, #20]
 8001a96:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	6819      	ldr	r1, [r3, #0]
 8001a9e:	22c0      	movs	r2, #192	; 0xc0
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	43da      	mvns	r2, r3
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	400a      	ands	r2, r1
 8001aae:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	371c      	adds	r7, #28
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8001aca:	b480      	push	{r7}
 8001acc:	b087      	sub	sp, #28
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	60f8      	str	r0, [r7, #12]
 8001ad2:	60b9      	str	r1, [r7, #8]
 8001ad4:	607a      	str	r2, [r7, #4]
 8001ad6:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d105      	bne.n	8001af4 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001ae8:	697a      	ldr	r2, [r7, #20]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4413      	add	r3, r2
 8001aee:	3308      	adds	r3, #8
 8001af0:	617b      	str	r3, [r7, #20]
 8001af2:	e004      	b.n	8001afe <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001af4:	697a      	ldr	r2, [r7, #20]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4413      	add	r3, r2
 8001afa:	3314      	adds	r3, #20
 8001afc:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	461a      	mov	r2, r3
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8001b06:	2300      	movs	r3, #0
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	371c      	adds	r7, #28
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b089      	sub	sp, #36	; 0x24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b22:	2300      	movs	r3, #0
 8001b24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b26:	2300      	movs	r3, #0
 8001b28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61fb      	str	r3, [r7, #28]
 8001b2e:	e165      	b.n	8001dfc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b30:	2201      	movs	r2, #1
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	697a      	ldr	r2, [r7, #20]
 8001b40:	4013      	ands	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	f040 8154 	bne.w	8001df6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d00b      	beq.n	8001b6e <HAL_GPIO_Init+0x5a>
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d007      	beq.n	8001b6e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b62:	2b11      	cmp	r3, #17
 8001b64:	d003      	beq.n	8001b6e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	2b12      	cmp	r3, #18
 8001b6c:	d130      	bne.n	8001bd0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	2203      	movs	r2, #3
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4013      	ands	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	68da      	ldr	r2, [r3, #12]
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	43db      	mvns	r3, r3
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	091b      	lsrs	r3, r3, #4
 8001bba:	f003 0201 	and.w	r2, r3, #1
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	2203      	movs	r2, #3
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	43db      	mvns	r3, r3
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	4013      	ands	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	689a      	ldr	r2, [r3, #8]
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d003      	beq.n	8001c10 <HAL_GPIO_Init+0xfc>
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	2b12      	cmp	r3, #18
 8001c0e:	d123      	bne.n	8001c58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	08da      	lsrs	r2, r3, #3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	3208      	adds	r2, #8
 8001c18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	f003 0307 	and.w	r3, r3, #7
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	220f      	movs	r2, #15
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4013      	ands	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	691a      	ldr	r2, [r3, #16]
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	f003 0307 	and.w	r3, r3, #7
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	08da      	lsrs	r2, r3, #3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	3208      	adds	r2, #8
 8001c52:	69b9      	ldr	r1, [r7, #24]
 8001c54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	2203      	movs	r2, #3
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f003 0203 	and.w	r2, r3, #3
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f000 80ae 	beq.w	8001df6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60fb      	str	r3, [r7, #12]
 8001c9e:	4b5c      	ldr	r3, [pc, #368]	; (8001e10 <HAL_GPIO_Init+0x2fc>)
 8001ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca2:	4a5b      	ldr	r2, [pc, #364]	; (8001e10 <HAL_GPIO_Init+0x2fc>)
 8001ca4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ca8:	6453      	str	r3, [r2, #68]	; 0x44
 8001caa:	4b59      	ldr	r3, [pc, #356]	; (8001e10 <HAL_GPIO_Init+0x2fc>)
 8001cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cb6:	4a57      	ldr	r2, [pc, #348]	; (8001e14 <HAL_GPIO_Init+0x300>)
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	089b      	lsrs	r3, r3, #2
 8001cbc:	3302      	adds	r3, #2
 8001cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	f003 0303 	and.w	r3, r3, #3
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	220f      	movs	r2, #15
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a4e      	ldr	r2, [pc, #312]	; (8001e18 <HAL_GPIO_Init+0x304>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d025      	beq.n	8001d2e <HAL_GPIO_Init+0x21a>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a4d      	ldr	r2, [pc, #308]	; (8001e1c <HAL_GPIO_Init+0x308>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d01f      	beq.n	8001d2a <HAL_GPIO_Init+0x216>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a4c      	ldr	r2, [pc, #304]	; (8001e20 <HAL_GPIO_Init+0x30c>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d019      	beq.n	8001d26 <HAL_GPIO_Init+0x212>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a4b      	ldr	r2, [pc, #300]	; (8001e24 <HAL_GPIO_Init+0x310>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d013      	beq.n	8001d22 <HAL_GPIO_Init+0x20e>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a4a      	ldr	r2, [pc, #296]	; (8001e28 <HAL_GPIO_Init+0x314>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d00d      	beq.n	8001d1e <HAL_GPIO_Init+0x20a>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a49      	ldr	r2, [pc, #292]	; (8001e2c <HAL_GPIO_Init+0x318>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d007      	beq.n	8001d1a <HAL_GPIO_Init+0x206>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a48      	ldr	r2, [pc, #288]	; (8001e30 <HAL_GPIO_Init+0x31c>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d101      	bne.n	8001d16 <HAL_GPIO_Init+0x202>
 8001d12:	2306      	movs	r3, #6
 8001d14:	e00c      	b.n	8001d30 <HAL_GPIO_Init+0x21c>
 8001d16:	2307      	movs	r3, #7
 8001d18:	e00a      	b.n	8001d30 <HAL_GPIO_Init+0x21c>
 8001d1a:	2305      	movs	r3, #5
 8001d1c:	e008      	b.n	8001d30 <HAL_GPIO_Init+0x21c>
 8001d1e:	2304      	movs	r3, #4
 8001d20:	e006      	b.n	8001d30 <HAL_GPIO_Init+0x21c>
 8001d22:	2303      	movs	r3, #3
 8001d24:	e004      	b.n	8001d30 <HAL_GPIO_Init+0x21c>
 8001d26:	2302      	movs	r3, #2
 8001d28:	e002      	b.n	8001d30 <HAL_GPIO_Init+0x21c>
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e000      	b.n	8001d30 <HAL_GPIO_Init+0x21c>
 8001d2e:	2300      	movs	r3, #0
 8001d30:	69fa      	ldr	r2, [r7, #28]
 8001d32:	f002 0203 	and.w	r2, r2, #3
 8001d36:	0092      	lsls	r2, r2, #2
 8001d38:	4093      	lsls	r3, r2
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d40:	4934      	ldr	r1, [pc, #208]	; (8001e14 <HAL_GPIO_Init+0x300>)
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	089b      	lsrs	r3, r3, #2
 8001d46:	3302      	adds	r3, #2
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d4e:	4b39      	ldr	r3, [pc, #228]	; (8001e34 <HAL_GPIO_Init+0x320>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	43db      	mvns	r3, r3
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d003      	beq.n	8001d72 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d72:	4a30      	ldr	r2, [pc, #192]	; (8001e34 <HAL_GPIO_Init+0x320>)
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d78:	4b2e      	ldr	r3, [pc, #184]	; (8001e34 <HAL_GPIO_Init+0x320>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	43db      	mvns	r3, r3
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4013      	ands	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d003      	beq.n	8001d9c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d9c:	4a25      	ldr	r2, [pc, #148]	; (8001e34 <HAL_GPIO_Init+0x320>)
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001da2:	4b24      	ldr	r3, [pc, #144]	; (8001e34 <HAL_GPIO_Init+0x320>)
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	43db      	mvns	r3, r3
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	4013      	ands	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d003      	beq.n	8001dc6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dc6:	4a1b      	ldr	r2, [pc, #108]	; (8001e34 <HAL_GPIO_Init+0x320>)
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dcc:	4b19      	ldr	r3, [pc, #100]	; (8001e34 <HAL_GPIO_Init+0x320>)
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d003      	beq.n	8001df0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001df0:	4a10      	ldr	r2, [pc, #64]	; (8001e34 <HAL_GPIO_Init+0x320>)
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	61fb      	str	r3, [r7, #28]
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	2b0f      	cmp	r3, #15
 8001e00:	f67f ae96 	bls.w	8001b30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e04:	bf00      	nop
 8001e06:	3724      	adds	r7, #36	; 0x24
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	40023800 	.word	0x40023800
 8001e14:	40013800 	.word	0x40013800
 8001e18:	40020000 	.word	0x40020000
 8001e1c:	40020400 	.word	0x40020400
 8001e20:	40020800 	.word	0x40020800
 8001e24:	40020c00 	.word	0x40020c00
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	40021400 	.word	0x40021400
 8001e30:	40021800 	.word	0x40021800
 8001e34:	40013c00 	.word	0x40013c00

08001e38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	460b      	mov	r3, r1
 8001e42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	691a      	ldr	r2, [r3, #16]
 8001e48:	887b      	ldrh	r3, [r7, #2]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d002      	beq.n	8001e56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e50:	2301      	movs	r3, #1
 8001e52:	73fb      	strb	r3, [r7, #15]
 8001e54:	e001      	b.n	8001e5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e56:	2300      	movs	r3, #0
 8001e58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3714      	adds	r7, #20
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e72:	2300      	movs	r3, #0
 8001e74:	603b      	str	r3, [r7, #0]
 8001e76:	4b20      	ldr	r3, [pc, #128]	; (8001ef8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	4a1f      	ldr	r2, [pc, #124]	; (8001ef8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e80:	6413      	str	r3, [r2, #64]	; 0x40
 8001e82:	4b1d      	ldr	r3, [pc, #116]	; (8001ef8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8a:	603b      	str	r3, [r7, #0]
 8001e8c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001e8e:	4b1b      	ldr	r3, [pc, #108]	; (8001efc <HAL_PWREx_EnableOverDrive+0x94>)
 8001e90:	2201      	movs	r2, #1
 8001e92:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e94:	f7ff fc56 	bl	8001744 <HAL_GetTick>
 8001e98:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e9a:	e009      	b.n	8001eb0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e9c:	f7ff fc52 	bl	8001744 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001eaa:	d901      	bls.n	8001eb0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e01f      	b.n	8001ef0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001eb0:	4b13      	ldr	r3, [pc, #76]	; (8001f00 <HAL_PWREx_EnableOverDrive+0x98>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ebc:	d1ee      	bne.n	8001e9c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001ebe:	4b11      	ldr	r3, [pc, #68]	; (8001f04 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ec4:	f7ff fc3e 	bl	8001744 <HAL_GetTick>
 8001ec8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001eca:	e009      	b.n	8001ee0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001ecc:	f7ff fc3a 	bl	8001744 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001eda:	d901      	bls.n	8001ee0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e007      	b.n	8001ef0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001ee0:	4b07      	ldr	r3, [pc, #28]	; (8001f00 <HAL_PWREx_EnableOverDrive+0x98>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001eec:	d1ee      	bne.n	8001ecc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3708      	adds	r7, #8
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40023800 	.word	0x40023800
 8001efc:	420e0040 	.word	0x420e0040
 8001f00:	40007000 	.word	0x40007000
 8001f04:	420e0044 	.word	0x420e0044

08001f08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d101      	bne.n	8001f1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e0cc      	b.n	80020b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f1c:	4b68      	ldr	r3, [pc, #416]	; (80020c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 030f 	and.w	r3, r3, #15
 8001f24:	683a      	ldr	r2, [r7, #0]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d90c      	bls.n	8001f44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f2a:	4b65      	ldr	r3, [pc, #404]	; (80020c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f2c:	683a      	ldr	r2, [r7, #0]
 8001f2e:	b2d2      	uxtb	r2, r2
 8001f30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f32:	4b63      	ldr	r3, [pc, #396]	; (80020c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 030f 	and.w	r3, r3, #15
 8001f3a:	683a      	ldr	r2, [r7, #0]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d001      	beq.n	8001f44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e0b8      	b.n	80020b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0302 	and.w	r3, r3, #2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d020      	beq.n	8001f92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0304 	and.w	r3, r3, #4
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d005      	beq.n	8001f68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f5c:	4b59      	ldr	r3, [pc, #356]	; (80020c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	4a58      	ldr	r2, [pc, #352]	; (80020c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0308 	and.w	r3, r3, #8
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d005      	beq.n	8001f80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f74:	4b53      	ldr	r3, [pc, #332]	; (80020c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	4a52      	ldr	r2, [pc, #328]	; (80020c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f80:	4b50      	ldr	r3, [pc, #320]	; (80020c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	494d      	ldr	r1, [pc, #308]	; (80020c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d044      	beq.n	8002028 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d107      	bne.n	8001fb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fa6:	4b47      	ldr	r3, [pc, #284]	; (80020c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d119      	bne.n	8001fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e07f      	b.n	80020b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d003      	beq.n	8001fc6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fc2:	2b03      	cmp	r3, #3
 8001fc4:	d107      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fc6:	4b3f      	ldr	r3, [pc, #252]	; (80020c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d109      	bne.n	8001fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e06f      	b.n	80020b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd6:	4b3b      	ldr	r3, [pc, #236]	; (80020c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d101      	bne.n	8001fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e067      	b.n	80020b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fe6:	4b37      	ldr	r3, [pc, #220]	; (80020c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f023 0203 	bic.w	r2, r3, #3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	4934      	ldr	r1, [pc, #208]	; (80020c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ff8:	f7ff fba4 	bl	8001744 <HAL_GetTick>
 8001ffc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ffe:	e00a      	b.n	8002016 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002000:	f7ff fba0 	bl	8001744 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	f241 3288 	movw	r2, #5000	; 0x1388
 800200e:	4293      	cmp	r3, r2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e04f      	b.n	80020b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002016:	4b2b      	ldr	r3, [pc, #172]	; (80020c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f003 020c 	and.w	r2, r3, #12
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	429a      	cmp	r2, r3
 8002026:	d1eb      	bne.n	8002000 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002028:	4b25      	ldr	r3, [pc, #148]	; (80020c0 <HAL_RCC_ClockConfig+0x1b8>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 030f 	and.w	r3, r3, #15
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	429a      	cmp	r2, r3
 8002034:	d20c      	bcs.n	8002050 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002036:	4b22      	ldr	r3, [pc, #136]	; (80020c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	b2d2      	uxtb	r2, r2
 800203c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800203e:	4b20      	ldr	r3, [pc, #128]	; (80020c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 030f 	and.w	r3, r3, #15
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	429a      	cmp	r2, r3
 800204a:	d001      	beq.n	8002050 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e032      	b.n	80020b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0304 	and.w	r3, r3, #4
 8002058:	2b00      	cmp	r3, #0
 800205a:	d008      	beq.n	800206e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800205c:	4b19      	ldr	r3, [pc, #100]	; (80020c4 <HAL_RCC_ClockConfig+0x1bc>)
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	4916      	ldr	r1, [pc, #88]	; (80020c4 <HAL_RCC_ClockConfig+0x1bc>)
 800206a:	4313      	orrs	r3, r2
 800206c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0308 	and.w	r3, r3, #8
 8002076:	2b00      	cmp	r3, #0
 8002078:	d009      	beq.n	800208e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800207a:	4b12      	ldr	r3, [pc, #72]	; (80020c4 <HAL_RCC_ClockConfig+0x1bc>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	490e      	ldr	r1, [pc, #56]	; (80020c4 <HAL_RCC_ClockConfig+0x1bc>)
 800208a:	4313      	orrs	r3, r2
 800208c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800208e:	f000 f873 	bl	8002178 <HAL_RCC_GetSysClockFreq>
 8002092:	4601      	mov	r1, r0
 8002094:	4b0b      	ldr	r3, [pc, #44]	; (80020c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	091b      	lsrs	r3, r3, #4
 800209a:	f003 030f 	and.w	r3, r3, #15
 800209e:	4a0a      	ldr	r2, [pc, #40]	; (80020c8 <HAL_RCC_ClockConfig+0x1c0>)
 80020a0:	5cd3      	ldrb	r3, [r2, r3]
 80020a2:	fa21 f303 	lsr.w	r3, r1, r3
 80020a6:	4a09      	ldr	r2, [pc, #36]	; (80020cc <HAL_RCC_ClockConfig+0x1c4>)
 80020a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80020aa:	4b09      	ldr	r3, [pc, #36]	; (80020d0 <HAL_RCC_ClockConfig+0x1c8>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff fa54 	bl	800155c <HAL_InitTick>

  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3710      	adds	r7, #16
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	40023c00 	.word	0x40023c00
 80020c4:	40023800 	.word	0x40023800
 80020c8:	080042f8 	.word	0x080042f8
 80020cc:	20000008 	.word	0x20000008
 80020d0:	2000000c 	.word	0x2000000c

080020d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020d8:	4b03      	ldr	r3, [pc, #12]	; (80020e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80020da:	681b      	ldr	r3, [r3, #0]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	20000008 	.word	0x20000008

080020ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80020f0:	f7ff fff0 	bl	80020d4 <HAL_RCC_GetHCLKFreq>
 80020f4:	4601      	mov	r1, r0
 80020f6:	4b05      	ldr	r3, [pc, #20]	; (800210c <HAL_RCC_GetPCLK2Freq+0x20>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	0b5b      	lsrs	r3, r3, #13
 80020fc:	f003 0307 	and.w	r3, r3, #7
 8002100:	4a03      	ldr	r2, [pc, #12]	; (8002110 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002102:	5cd3      	ldrb	r3, [r2, r3]
 8002104:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002108:	4618      	mov	r0, r3
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40023800 	.word	0x40023800
 8002110:	08004308 	.word	0x08004308

08002114 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	220f      	movs	r2, #15
 8002122:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002124:	4b12      	ldr	r3, [pc, #72]	; (8002170 <HAL_RCC_GetClockConfig+0x5c>)
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f003 0203 	and.w	r2, r3, #3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002130:	4b0f      	ldr	r3, [pc, #60]	; (8002170 <HAL_RCC_GetClockConfig+0x5c>)
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800213c:	4b0c      	ldr	r3, [pc, #48]	; (8002170 <HAL_RCC_GetClockConfig+0x5c>)
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002148:	4b09      	ldr	r3, [pc, #36]	; (8002170 <HAL_RCC_GetClockConfig+0x5c>)
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	08db      	lsrs	r3, r3, #3
 800214e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002156:	4b07      	ldr	r3, [pc, #28]	; (8002174 <HAL_RCC_GetClockConfig+0x60>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 020f 	and.w	r2, r3, #15
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	601a      	str	r2, [r3, #0]
}
 8002162:	bf00      	nop
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	40023800 	.word	0x40023800
 8002174:	40023c00 	.word	0x40023c00

08002178 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800217a:	b087      	sub	sp, #28
 800217c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800217e:	2300      	movs	r3, #0
 8002180:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8002182:	2300      	movs	r3, #0
 8002184:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8002186:	2300      	movs	r3, #0
 8002188:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800218a:	2300      	movs	r3, #0
 800218c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800218e:	2300      	movs	r3, #0
 8002190:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002192:	4bc6      	ldr	r3, [pc, #792]	; (80024ac <HAL_RCC_GetSysClockFreq+0x334>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f003 030c 	and.w	r3, r3, #12
 800219a:	2b0c      	cmp	r3, #12
 800219c:	f200 817e 	bhi.w	800249c <HAL_RCC_GetSysClockFreq+0x324>
 80021a0:	a201      	add	r2, pc, #4	; (adr r2, 80021a8 <HAL_RCC_GetSysClockFreq+0x30>)
 80021a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a6:	bf00      	nop
 80021a8:	080021dd 	.word	0x080021dd
 80021ac:	0800249d 	.word	0x0800249d
 80021b0:	0800249d 	.word	0x0800249d
 80021b4:	0800249d 	.word	0x0800249d
 80021b8:	080021e3 	.word	0x080021e3
 80021bc:	0800249d 	.word	0x0800249d
 80021c0:	0800249d 	.word	0x0800249d
 80021c4:	0800249d 	.word	0x0800249d
 80021c8:	080021e9 	.word	0x080021e9
 80021cc:	0800249d 	.word	0x0800249d
 80021d0:	0800249d 	.word	0x0800249d
 80021d4:	0800249d 	.word	0x0800249d
 80021d8:	08002345 	.word	0x08002345
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021dc:	4bb4      	ldr	r3, [pc, #720]	; (80024b0 <HAL_RCC_GetSysClockFreq+0x338>)
 80021de:	613b      	str	r3, [r7, #16]
       break;
 80021e0:	e15f      	b.n	80024a2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021e2:	4bb4      	ldr	r3, [pc, #720]	; (80024b4 <HAL_RCC_GetSysClockFreq+0x33c>)
 80021e4:	613b      	str	r3, [r7, #16]
      break;
 80021e6:	e15c      	b.n	80024a2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021e8:	4bb0      	ldr	r3, [pc, #704]	; (80024ac <HAL_RCC_GetSysClockFreq+0x334>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021f0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021f2:	4bae      	ldr	r3, [pc, #696]	; (80024ac <HAL_RCC_GetSysClockFreq+0x334>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d04a      	beq.n	8002294 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021fe:	4bab      	ldr	r3, [pc, #684]	; (80024ac <HAL_RCC_GetSysClockFreq+0x334>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	099b      	lsrs	r3, r3, #6
 8002204:	f04f 0400 	mov.w	r4, #0
 8002208:	f240 11ff 	movw	r1, #511	; 0x1ff
 800220c:	f04f 0200 	mov.w	r2, #0
 8002210:	ea03 0501 	and.w	r5, r3, r1
 8002214:	ea04 0602 	and.w	r6, r4, r2
 8002218:	4629      	mov	r1, r5
 800221a:	4632      	mov	r2, r6
 800221c:	f04f 0300 	mov.w	r3, #0
 8002220:	f04f 0400 	mov.w	r4, #0
 8002224:	0154      	lsls	r4, r2, #5
 8002226:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800222a:	014b      	lsls	r3, r1, #5
 800222c:	4619      	mov	r1, r3
 800222e:	4622      	mov	r2, r4
 8002230:	1b49      	subs	r1, r1, r5
 8002232:	eb62 0206 	sbc.w	r2, r2, r6
 8002236:	f04f 0300 	mov.w	r3, #0
 800223a:	f04f 0400 	mov.w	r4, #0
 800223e:	0194      	lsls	r4, r2, #6
 8002240:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002244:	018b      	lsls	r3, r1, #6
 8002246:	1a5b      	subs	r3, r3, r1
 8002248:	eb64 0402 	sbc.w	r4, r4, r2
 800224c:	f04f 0100 	mov.w	r1, #0
 8002250:	f04f 0200 	mov.w	r2, #0
 8002254:	00e2      	lsls	r2, r4, #3
 8002256:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800225a:	00d9      	lsls	r1, r3, #3
 800225c:	460b      	mov	r3, r1
 800225e:	4614      	mov	r4, r2
 8002260:	195b      	adds	r3, r3, r5
 8002262:	eb44 0406 	adc.w	r4, r4, r6
 8002266:	f04f 0100 	mov.w	r1, #0
 800226a:	f04f 0200 	mov.w	r2, #0
 800226e:	0262      	lsls	r2, r4, #9
 8002270:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002274:	0259      	lsls	r1, r3, #9
 8002276:	460b      	mov	r3, r1
 8002278:	4614      	mov	r4, r2
 800227a:	4618      	mov	r0, r3
 800227c:	4621      	mov	r1, r4
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f04f 0400 	mov.w	r4, #0
 8002284:	461a      	mov	r2, r3
 8002286:	4623      	mov	r3, r4
 8002288:	f7fe fc00 	bl	8000a8c <__aeabi_uldivmod>
 800228c:	4603      	mov	r3, r0
 800228e:	460c      	mov	r4, r1
 8002290:	617b      	str	r3, [r7, #20]
 8002292:	e049      	b.n	8002328 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002294:	4b85      	ldr	r3, [pc, #532]	; (80024ac <HAL_RCC_GetSysClockFreq+0x334>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	099b      	lsrs	r3, r3, #6
 800229a:	f04f 0400 	mov.w	r4, #0
 800229e:	f240 11ff 	movw	r1, #511	; 0x1ff
 80022a2:	f04f 0200 	mov.w	r2, #0
 80022a6:	ea03 0501 	and.w	r5, r3, r1
 80022aa:	ea04 0602 	and.w	r6, r4, r2
 80022ae:	4629      	mov	r1, r5
 80022b0:	4632      	mov	r2, r6
 80022b2:	f04f 0300 	mov.w	r3, #0
 80022b6:	f04f 0400 	mov.w	r4, #0
 80022ba:	0154      	lsls	r4, r2, #5
 80022bc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80022c0:	014b      	lsls	r3, r1, #5
 80022c2:	4619      	mov	r1, r3
 80022c4:	4622      	mov	r2, r4
 80022c6:	1b49      	subs	r1, r1, r5
 80022c8:	eb62 0206 	sbc.w	r2, r2, r6
 80022cc:	f04f 0300 	mov.w	r3, #0
 80022d0:	f04f 0400 	mov.w	r4, #0
 80022d4:	0194      	lsls	r4, r2, #6
 80022d6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80022da:	018b      	lsls	r3, r1, #6
 80022dc:	1a5b      	subs	r3, r3, r1
 80022de:	eb64 0402 	sbc.w	r4, r4, r2
 80022e2:	f04f 0100 	mov.w	r1, #0
 80022e6:	f04f 0200 	mov.w	r2, #0
 80022ea:	00e2      	lsls	r2, r4, #3
 80022ec:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80022f0:	00d9      	lsls	r1, r3, #3
 80022f2:	460b      	mov	r3, r1
 80022f4:	4614      	mov	r4, r2
 80022f6:	195b      	adds	r3, r3, r5
 80022f8:	eb44 0406 	adc.w	r4, r4, r6
 80022fc:	f04f 0100 	mov.w	r1, #0
 8002300:	f04f 0200 	mov.w	r2, #0
 8002304:	02a2      	lsls	r2, r4, #10
 8002306:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800230a:	0299      	lsls	r1, r3, #10
 800230c:	460b      	mov	r3, r1
 800230e:	4614      	mov	r4, r2
 8002310:	4618      	mov	r0, r3
 8002312:	4621      	mov	r1, r4
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f04f 0400 	mov.w	r4, #0
 800231a:	461a      	mov	r2, r3
 800231c:	4623      	mov	r3, r4
 800231e:	f7fe fbb5 	bl	8000a8c <__aeabi_uldivmod>
 8002322:	4603      	mov	r3, r0
 8002324:	460c      	mov	r4, r1
 8002326:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002328:	4b60      	ldr	r3, [pc, #384]	; (80024ac <HAL_RCC_GetSysClockFreq+0x334>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	0c1b      	lsrs	r3, r3, #16
 800232e:	f003 0303 	and.w	r3, r3, #3
 8002332:	3301      	adds	r3, #1
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002338:	697a      	ldr	r2, [r7, #20]
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002340:	613b      	str	r3, [r7, #16]
      break;
 8002342:	e0ae      	b.n	80024a2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002344:	4b59      	ldr	r3, [pc, #356]	; (80024ac <HAL_RCC_GetSysClockFreq+0x334>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800234c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800234e:	4b57      	ldr	r3, [pc, #348]	; (80024ac <HAL_RCC_GetSysClockFreq+0x334>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d04a      	beq.n	80023f0 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800235a:	4b54      	ldr	r3, [pc, #336]	; (80024ac <HAL_RCC_GetSysClockFreq+0x334>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	099b      	lsrs	r3, r3, #6
 8002360:	f04f 0400 	mov.w	r4, #0
 8002364:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002368:	f04f 0200 	mov.w	r2, #0
 800236c:	ea03 0501 	and.w	r5, r3, r1
 8002370:	ea04 0602 	and.w	r6, r4, r2
 8002374:	4629      	mov	r1, r5
 8002376:	4632      	mov	r2, r6
 8002378:	f04f 0300 	mov.w	r3, #0
 800237c:	f04f 0400 	mov.w	r4, #0
 8002380:	0154      	lsls	r4, r2, #5
 8002382:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002386:	014b      	lsls	r3, r1, #5
 8002388:	4619      	mov	r1, r3
 800238a:	4622      	mov	r2, r4
 800238c:	1b49      	subs	r1, r1, r5
 800238e:	eb62 0206 	sbc.w	r2, r2, r6
 8002392:	f04f 0300 	mov.w	r3, #0
 8002396:	f04f 0400 	mov.w	r4, #0
 800239a:	0194      	lsls	r4, r2, #6
 800239c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80023a0:	018b      	lsls	r3, r1, #6
 80023a2:	1a5b      	subs	r3, r3, r1
 80023a4:	eb64 0402 	sbc.w	r4, r4, r2
 80023a8:	f04f 0100 	mov.w	r1, #0
 80023ac:	f04f 0200 	mov.w	r2, #0
 80023b0:	00e2      	lsls	r2, r4, #3
 80023b2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80023b6:	00d9      	lsls	r1, r3, #3
 80023b8:	460b      	mov	r3, r1
 80023ba:	4614      	mov	r4, r2
 80023bc:	195b      	adds	r3, r3, r5
 80023be:	eb44 0406 	adc.w	r4, r4, r6
 80023c2:	f04f 0100 	mov.w	r1, #0
 80023c6:	f04f 0200 	mov.w	r2, #0
 80023ca:	0262      	lsls	r2, r4, #9
 80023cc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80023d0:	0259      	lsls	r1, r3, #9
 80023d2:	460b      	mov	r3, r1
 80023d4:	4614      	mov	r4, r2
 80023d6:	4618      	mov	r0, r3
 80023d8:	4621      	mov	r1, r4
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f04f 0400 	mov.w	r4, #0
 80023e0:	461a      	mov	r2, r3
 80023e2:	4623      	mov	r3, r4
 80023e4:	f7fe fb52 	bl	8000a8c <__aeabi_uldivmod>
 80023e8:	4603      	mov	r3, r0
 80023ea:	460c      	mov	r4, r1
 80023ec:	617b      	str	r3, [r7, #20]
 80023ee:	e049      	b.n	8002484 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023f0:	4b2e      	ldr	r3, [pc, #184]	; (80024ac <HAL_RCC_GetSysClockFreq+0x334>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	099b      	lsrs	r3, r3, #6
 80023f6:	f04f 0400 	mov.w	r4, #0
 80023fa:	f240 11ff 	movw	r1, #511	; 0x1ff
 80023fe:	f04f 0200 	mov.w	r2, #0
 8002402:	ea03 0501 	and.w	r5, r3, r1
 8002406:	ea04 0602 	and.w	r6, r4, r2
 800240a:	4629      	mov	r1, r5
 800240c:	4632      	mov	r2, r6
 800240e:	f04f 0300 	mov.w	r3, #0
 8002412:	f04f 0400 	mov.w	r4, #0
 8002416:	0154      	lsls	r4, r2, #5
 8002418:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800241c:	014b      	lsls	r3, r1, #5
 800241e:	4619      	mov	r1, r3
 8002420:	4622      	mov	r2, r4
 8002422:	1b49      	subs	r1, r1, r5
 8002424:	eb62 0206 	sbc.w	r2, r2, r6
 8002428:	f04f 0300 	mov.w	r3, #0
 800242c:	f04f 0400 	mov.w	r4, #0
 8002430:	0194      	lsls	r4, r2, #6
 8002432:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002436:	018b      	lsls	r3, r1, #6
 8002438:	1a5b      	subs	r3, r3, r1
 800243a:	eb64 0402 	sbc.w	r4, r4, r2
 800243e:	f04f 0100 	mov.w	r1, #0
 8002442:	f04f 0200 	mov.w	r2, #0
 8002446:	00e2      	lsls	r2, r4, #3
 8002448:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800244c:	00d9      	lsls	r1, r3, #3
 800244e:	460b      	mov	r3, r1
 8002450:	4614      	mov	r4, r2
 8002452:	195b      	adds	r3, r3, r5
 8002454:	eb44 0406 	adc.w	r4, r4, r6
 8002458:	f04f 0100 	mov.w	r1, #0
 800245c:	f04f 0200 	mov.w	r2, #0
 8002460:	02a2      	lsls	r2, r4, #10
 8002462:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002466:	0299      	lsls	r1, r3, #10
 8002468:	460b      	mov	r3, r1
 800246a:	4614      	mov	r4, r2
 800246c:	4618      	mov	r0, r3
 800246e:	4621      	mov	r1, r4
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f04f 0400 	mov.w	r4, #0
 8002476:	461a      	mov	r2, r3
 8002478:	4623      	mov	r3, r4
 800247a:	f7fe fb07 	bl	8000a8c <__aeabi_uldivmod>
 800247e:	4603      	mov	r3, r0
 8002480:	460c      	mov	r4, r1
 8002482:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002484:	4b09      	ldr	r3, [pc, #36]	; (80024ac <HAL_RCC_GetSysClockFreq+0x334>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	0f1b      	lsrs	r3, r3, #28
 800248a:	f003 0307 	and.w	r3, r3, #7
 800248e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002490:	697a      	ldr	r2, [r7, #20]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	fbb2 f3f3 	udiv	r3, r2, r3
 8002498:	613b      	str	r3, [r7, #16]
      break;
 800249a:	e002      	b.n	80024a2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800249c:	4b04      	ldr	r3, [pc, #16]	; (80024b0 <HAL_RCC_GetSysClockFreq+0x338>)
 800249e:	613b      	str	r3, [r7, #16]
      break;
 80024a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024a2:	693b      	ldr	r3, [r7, #16]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	371c      	adds	r7, #28
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024ac:	40023800 	.word	0x40023800
 80024b0:	00f42400 	.word	0x00f42400
 80024b4:	007a1200 	.word	0x007a1200

080024b8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024c0:	2300      	movs	r3, #0
 80024c2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0301 	and.w	r3, r3, #1
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	f000 8083 	beq.w	80025d8 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80024d2:	4b95      	ldr	r3, [pc, #596]	; (8002728 <HAL_RCC_OscConfig+0x270>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f003 030c 	and.w	r3, r3, #12
 80024da:	2b04      	cmp	r3, #4
 80024dc:	d019      	beq.n	8002512 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80024de:	4b92      	ldr	r3, [pc, #584]	; (8002728 <HAL_RCC_OscConfig+0x270>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80024e6:	2b08      	cmp	r3, #8
 80024e8:	d106      	bne.n	80024f8 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80024ea:	4b8f      	ldr	r3, [pc, #572]	; (8002728 <HAL_RCC_OscConfig+0x270>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024f6:	d00c      	beq.n	8002512 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024f8:	4b8b      	ldr	r3, [pc, #556]	; (8002728 <HAL_RCC_OscConfig+0x270>)
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002500:	2b0c      	cmp	r3, #12
 8002502:	d112      	bne.n	800252a <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002504:	4b88      	ldr	r3, [pc, #544]	; (8002728 <HAL_RCC_OscConfig+0x270>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800250c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002510:	d10b      	bne.n	800252a <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002512:	4b85      	ldr	r3, [pc, #532]	; (8002728 <HAL_RCC_OscConfig+0x270>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d05b      	beq.n	80025d6 <HAL_RCC_OscConfig+0x11e>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d157      	bne.n	80025d6 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e216      	b.n	8002958 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002532:	d106      	bne.n	8002542 <HAL_RCC_OscConfig+0x8a>
 8002534:	4b7c      	ldr	r3, [pc, #496]	; (8002728 <HAL_RCC_OscConfig+0x270>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a7b      	ldr	r2, [pc, #492]	; (8002728 <HAL_RCC_OscConfig+0x270>)
 800253a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800253e:	6013      	str	r3, [r2, #0]
 8002540:	e01d      	b.n	800257e <HAL_RCC_OscConfig+0xc6>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800254a:	d10c      	bne.n	8002566 <HAL_RCC_OscConfig+0xae>
 800254c:	4b76      	ldr	r3, [pc, #472]	; (8002728 <HAL_RCC_OscConfig+0x270>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a75      	ldr	r2, [pc, #468]	; (8002728 <HAL_RCC_OscConfig+0x270>)
 8002552:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002556:	6013      	str	r3, [r2, #0]
 8002558:	4b73      	ldr	r3, [pc, #460]	; (8002728 <HAL_RCC_OscConfig+0x270>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a72      	ldr	r2, [pc, #456]	; (8002728 <HAL_RCC_OscConfig+0x270>)
 800255e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002562:	6013      	str	r3, [r2, #0]
 8002564:	e00b      	b.n	800257e <HAL_RCC_OscConfig+0xc6>
 8002566:	4b70      	ldr	r3, [pc, #448]	; (8002728 <HAL_RCC_OscConfig+0x270>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a6f      	ldr	r2, [pc, #444]	; (8002728 <HAL_RCC_OscConfig+0x270>)
 800256c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002570:	6013      	str	r3, [r2, #0]
 8002572:	4b6d      	ldr	r3, [pc, #436]	; (8002728 <HAL_RCC_OscConfig+0x270>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a6c      	ldr	r2, [pc, #432]	; (8002728 <HAL_RCC_OscConfig+0x270>)
 8002578:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800257c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d013      	beq.n	80025ae <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002586:	f7ff f8dd 	bl	8001744 <HAL_GetTick>
 800258a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800258c:	e008      	b.n	80025a0 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800258e:	f7ff f8d9 	bl	8001744 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2b64      	cmp	r3, #100	; 0x64
 800259a:	d901      	bls.n	80025a0 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e1db      	b.n	8002958 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025a0:	4b61      	ldr	r3, [pc, #388]	; (8002728 <HAL_RCC_OscConfig+0x270>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d0f0      	beq.n	800258e <HAL_RCC_OscConfig+0xd6>
 80025ac:	e014      	b.n	80025d8 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ae:	f7ff f8c9 	bl	8001744 <HAL_GetTick>
 80025b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025b4:	e008      	b.n	80025c8 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025b6:	f7ff f8c5 	bl	8001744 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b64      	cmp	r3, #100	; 0x64
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e1c7      	b.n	8002958 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025c8:	4b57      	ldr	r3, [pc, #348]	; (8002728 <HAL_RCC_OscConfig+0x270>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1f0      	bne.n	80025b6 <HAL_RCC_OscConfig+0xfe>
 80025d4:	e000      	b.n	80025d8 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d06f      	beq.n	80026c4 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80025e4:	4b50      	ldr	r3, [pc, #320]	; (8002728 <HAL_RCC_OscConfig+0x270>)
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f003 030c 	and.w	r3, r3, #12
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d017      	beq.n	8002620 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80025f0:	4b4d      	ldr	r3, [pc, #308]	; (8002728 <HAL_RCC_OscConfig+0x270>)
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80025f8:	2b08      	cmp	r3, #8
 80025fa:	d105      	bne.n	8002608 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80025fc:	4b4a      	ldr	r3, [pc, #296]	; (8002728 <HAL_RCC_OscConfig+0x270>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d00b      	beq.n	8002620 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002608:	4b47      	ldr	r3, [pc, #284]	; (8002728 <HAL_RCC_OscConfig+0x270>)
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002610:	2b0c      	cmp	r3, #12
 8002612:	d11c      	bne.n	800264e <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002614:	4b44      	ldr	r3, [pc, #272]	; (8002728 <HAL_RCC_OscConfig+0x270>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d116      	bne.n	800264e <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002620:	4b41      	ldr	r3, [pc, #260]	; (8002728 <HAL_RCC_OscConfig+0x270>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d005      	beq.n	8002638 <HAL_RCC_OscConfig+0x180>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d001      	beq.n	8002638 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e18f      	b.n	8002958 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002638:	4b3b      	ldr	r3, [pc, #236]	; (8002728 <HAL_RCC_OscConfig+0x270>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	4938      	ldr	r1, [pc, #224]	; (8002728 <HAL_RCC_OscConfig+0x270>)
 8002648:	4313      	orrs	r3, r2
 800264a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800264c:	e03a      	b.n	80026c4 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d020      	beq.n	8002698 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002656:	4b35      	ldr	r3, [pc, #212]	; (800272c <HAL_RCC_OscConfig+0x274>)
 8002658:	2201      	movs	r2, #1
 800265a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800265c:	f7ff f872 	bl	8001744 <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002664:	f7ff f86e 	bl	8001744 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e170      	b.n	8002958 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002676:	4b2c      	ldr	r3, [pc, #176]	; (8002728 <HAL_RCC_OscConfig+0x270>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d0f0      	beq.n	8002664 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002682:	4b29      	ldr	r3, [pc, #164]	; (8002728 <HAL_RCC_OscConfig+0x270>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	4925      	ldr	r1, [pc, #148]	; (8002728 <HAL_RCC_OscConfig+0x270>)
 8002692:	4313      	orrs	r3, r2
 8002694:	600b      	str	r3, [r1, #0]
 8002696:	e015      	b.n	80026c4 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002698:	4b24      	ldr	r3, [pc, #144]	; (800272c <HAL_RCC_OscConfig+0x274>)
 800269a:	2200      	movs	r2, #0
 800269c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800269e:	f7ff f851 	bl	8001744 <HAL_GetTick>
 80026a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026a4:	e008      	b.n	80026b8 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026a6:	f7ff f84d 	bl	8001744 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d901      	bls.n	80026b8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e14f      	b.n	8002958 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026b8:	4b1b      	ldr	r3, [pc, #108]	; (8002728 <HAL_RCC_OscConfig+0x270>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d1f0      	bne.n	80026a6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0308 	and.w	r3, r3, #8
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d037      	beq.n	8002740 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	695b      	ldr	r3, [r3, #20]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d016      	beq.n	8002706 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026d8:	4b15      	ldr	r3, [pc, #84]	; (8002730 <HAL_RCC_OscConfig+0x278>)
 80026da:	2201      	movs	r2, #1
 80026dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026de:	f7ff f831 	bl	8001744 <HAL_GetTick>
 80026e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026e4:	e008      	b.n	80026f8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026e6:	f7ff f82d 	bl	8001744 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d901      	bls.n	80026f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e12f      	b.n	8002958 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026f8:	4b0b      	ldr	r3, [pc, #44]	; (8002728 <HAL_RCC_OscConfig+0x270>)
 80026fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d0f0      	beq.n	80026e6 <HAL_RCC_OscConfig+0x22e>
 8002704:	e01c      	b.n	8002740 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002706:	4b0a      	ldr	r3, [pc, #40]	; (8002730 <HAL_RCC_OscConfig+0x278>)
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800270c:	f7ff f81a 	bl	8001744 <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002712:	e00f      	b.n	8002734 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002714:	f7ff f816 	bl	8001744 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d908      	bls.n	8002734 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e118      	b.n	8002958 <HAL_RCC_OscConfig+0x4a0>
 8002726:	bf00      	nop
 8002728:	40023800 	.word	0x40023800
 800272c:	42470000 	.word	0x42470000
 8002730:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002734:	4b8a      	ldr	r3, [pc, #552]	; (8002960 <HAL_RCC_OscConfig+0x4a8>)
 8002736:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002738:	f003 0302 	and.w	r3, r3, #2
 800273c:	2b00      	cmp	r3, #0
 800273e:	d1e9      	bne.n	8002714 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0304 	and.w	r3, r3, #4
 8002748:	2b00      	cmp	r3, #0
 800274a:	f000 8097 	beq.w	800287c <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800274e:	2300      	movs	r3, #0
 8002750:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002752:	4b83      	ldr	r3, [pc, #524]	; (8002960 <HAL_RCC_OscConfig+0x4a8>)
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10f      	bne.n	800277e <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800275e:	2300      	movs	r3, #0
 8002760:	60fb      	str	r3, [r7, #12]
 8002762:	4b7f      	ldr	r3, [pc, #508]	; (8002960 <HAL_RCC_OscConfig+0x4a8>)
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	4a7e      	ldr	r2, [pc, #504]	; (8002960 <HAL_RCC_OscConfig+0x4a8>)
 8002768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800276c:	6413      	str	r3, [r2, #64]	; 0x40
 800276e:	4b7c      	ldr	r3, [pc, #496]	; (8002960 <HAL_RCC_OscConfig+0x4a8>)
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800277a:	2301      	movs	r3, #1
 800277c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800277e:	4b79      	ldr	r3, [pc, #484]	; (8002964 <HAL_RCC_OscConfig+0x4ac>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002786:	2b00      	cmp	r3, #0
 8002788:	d118      	bne.n	80027bc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800278a:	4b76      	ldr	r3, [pc, #472]	; (8002964 <HAL_RCC_OscConfig+0x4ac>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a75      	ldr	r2, [pc, #468]	; (8002964 <HAL_RCC_OscConfig+0x4ac>)
 8002790:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002794:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002796:	f7fe ffd5 	bl	8001744 <HAL_GetTick>
 800279a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800279c:	e008      	b.n	80027b0 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800279e:	f7fe ffd1 	bl	8001744 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e0d3      	b.n	8002958 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b0:	4b6c      	ldr	r3, [pc, #432]	; (8002964 <HAL_RCC_OscConfig+0x4ac>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d0f0      	beq.n	800279e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d106      	bne.n	80027d2 <HAL_RCC_OscConfig+0x31a>
 80027c4:	4b66      	ldr	r3, [pc, #408]	; (8002960 <HAL_RCC_OscConfig+0x4a8>)
 80027c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c8:	4a65      	ldr	r2, [pc, #404]	; (8002960 <HAL_RCC_OscConfig+0x4a8>)
 80027ca:	f043 0301 	orr.w	r3, r3, #1
 80027ce:	6713      	str	r3, [r2, #112]	; 0x70
 80027d0:	e01c      	b.n	800280c <HAL_RCC_OscConfig+0x354>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	2b05      	cmp	r3, #5
 80027d8:	d10c      	bne.n	80027f4 <HAL_RCC_OscConfig+0x33c>
 80027da:	4b61      	ldr	r3, [pc, #388]	; (8002960 <HAL_RCC_OscConfig+0x4a8>)
 80027dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027de:	4a60      	ldr	r2, [pc, #384]	; (8002960 <HAL_RCC_OscConfig+0x4a8>)
 80027e0:	f043 0304 	orr.w	r3, r3, #4
 80027e4:	6713      	str	r3, [r2, #112]	; 0x70
 80027e6:	4b5e      	ldr	r3, [pc, #376]	; (8002960 <HAL_RCC_OscConfig+0x4a8>)
 80027e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ea:	4a5d      	ldr	r2, [pc, #372]	; (8002960 <HAL_RCC_OscConfig+0x4a8>)
 80027ec:	f043 0301 	orr.w	r3, r3, #1
 80027f0:	6713      	str	r3, [r2, #112]	; 0x70
 80027f2:	e00b      	b.n	800280c <HAL_RCC_OscConfig+0x354>
 80027f4:	4b5a      	ldr	r3, [pc, #360]	; (8002960 <HAL_RCC_OscConfig+0x4a8>)
 80027f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f8:	4a59      	ldr	r2, [pc, #356]	; (8002960 <HAL_RCC_OscConfig+0x4a8>)
 80027fa:	f023 0301 	bic.w	r3, r3, #1
 80027fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002800:	4b57      	ldr	r3, [pc, #348]	; (8002960 <HAL_RCC_OscConfig+0x4a8>)
 8002802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002804:	4a56      	ldr	r2, [pc, #344]	; (8002960 <HAL_RCC_OscConfig+0x4a8>)
 8002806:	f023 0304 	bic.w	r3, r3, #4
 800280a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d015      	beq.n	8002840 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002814:	f7fe ff96 	bl	8001744 <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800281a:	e00a      	b.n	8002832 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800281c:	f7fe ff92 	bl	8001744 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	f241 3288 	movw	r2, #5000	; 0x1388
 800282a:	4293      	cmp	r3, r2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e092      	b.n	8002958 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002832:	4b4b      	ldr	r3, [pc, #300]	; (8002960 <HAL_RCC_OscConfig+0x4a8>)
 8002834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d0ee      	beq.n	800281c <HAL_RCC_OscConfig+0x364>
 800283e:	e014      	b.n	800286a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002840:	f7fe ff80 	bl	8001744 <HAL_GetTick>
 8002844:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002846:	e00a      	b.n	800285e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002848:	f7fe ff7c 	bl	8001744 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	f241 3288 	movw	r2, #5000	; 0x1388
 8002856:	4293      	cmp	r3, r2
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e07c      	b.n	8002958 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800285e:	4b40      	ldr	r3, [pc, #256]	; (8002960 <HAL_RCC_OscConfig+0x4a8>)
 8002860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1ee      	bne.n	8002848 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800286a:	7dfb      	ldrb	r3, [r7, #23]
 800286c:	2b01      	cmp	r3, #1
 800286e:	d105      	bne.n	800287c <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002870:	4b3b      	ldr	r3, [pc, #236]	; (8002960 <HAL_RCC_OscConfig+0x4a8>)
 8002872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002874:	4a3a      	ldr	r2, [pc, #232]	; (8002960 <HAL_RCC_OscConfig+0x4a8>)
 8002876:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800287a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d068      	beq.n	8002956 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002884:	4b36      	ldr	r3, [pc, #216]	; (8002960 <HAL_RCC_OscConfig+0x4a8>)
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f003 030c 	and.w	r3, r3, #12
 800288c:	2b08      	cmp	r3, #8
 800288e:	d060      	beq.n	8002952 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	2b02      	cmp	r3, #2
 8002896:	d145      	bne.n	8002924 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002898:	4b33      	ldr	r3, [pc, #204]	; (8002968 <HAL_RCC_OscConfig+0x4b0>)
 800289a:	2200      	movs	r2, #0
 800289c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289e:	f7fe ff51 	bl	8001744 <HAL_GetTick>
 80028a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028a4:	e008      	b.n	80028b8 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028a6:	f7fe ff4d 	bl	8001744 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e04f      	b.n	8002958 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028b8:	4b29      	ldr	r3, [pc, #164]	; (8002960 <HAL_RCC_OscConfig+0x4a8>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d1f0      	bne.n	80028a6 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	69da      	ldr	r2, [r3, #28]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a1b      	ldr	r3, [r3, #32]
 80028cc:	431a      	orrs	r2, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d2:	019b      	lsls	r3, r3, #6
 80028d4:	431a      	orrs	r2, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028da:	085b      	lsrs	r3, r3, #1
 80028dc:	3b01      	subs	r3, #1
 80028de:	041b      	lsls	r3, r3, #16
 80028e0:	431a      	orrs	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e6:	061b      	lsls	r3, r3, #24
 80028e8:	431a      	orrs	r2, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ee:	071b      	lsls	r3, r3, #28
 80028f0:	491b      	ldr	r1, [pc, #108]	; (8002960 <HAL_RCC_OscConfig+0x4a8>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028f6:	4b1c      	ldr	r3, [pc, #112]	; (8002968 <HAL_RCC_OscConfig+0x4b0>)
 80028f8:	2201      	movs	r2, #1
 80028fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028fc:	f7fe ff22 	bl	8001744 <HAL_GetTick>
 8002900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002902:	e008      	b.n	8002916 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002904:	f7fe ff1e 	bl	8001744 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b02      	cmp	r3, #2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e020      	b.n	8002958 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002916:	4b12      	ldr	r3, [pc, #72]	; (8002960 <HAL_RCC_OscConfig+0x4a8>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d0f0      	beq.n	8002904 <HAL_RCC_OscConfig+0x44c>
 8002922:	e018      	b.n	8002956 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002924:	4b10      	ldr	r3, [pc, #64]	; (8002968 <HAL_RCC_OscConfig+0x4b0>)
 8002926:	2200      	movs	r2, #0
 8002928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292a:	f7fe ff0b 	bl	8001744 <HAL_GetTick>
 800292e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002930:	e008      	b.n	8002944 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002932:	f7fe ff07 	bl	8001744 <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b02      	cmp	r3, #2
 800293e:	d901      	bls.n	8002944 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e009      	b.n	8002958 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002944:	4b06      	ldr	r3, [pc, #24]	; (8002960 <HAL_RCC_OscConfig+0x4a8>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d1f0      	bne.n	8002932 <HAL_RCC_OscConfig+0x47a>
 8002950:	e001      	b.n	8002956 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e000      	b.n	8002958 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	3718      	adds	r7, #24
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	40023800 	.word	0x40023800
 8002964:	40007000 	.word	0x40007000
 8002968:	42470060 	.word	0x42470060

0800296c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d101      	bne.n	800297e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e01d      	b.n	80029ba <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d106      	bne.n	8002998 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 f815 	bl	80029c2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2202      	movs	r2, #2
 800299c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	3304      	adds	r3, #4
 80029a8:	4619      	mov	r1, r3
 80029aa:	4610      	mov	r0, r2
 80029ac:	f000 f968 	bl	8002c80 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80029c2:	b480      	push	{r7}
 80029c4:	b083      	sub	sp, #12
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80029ca:	bf00      	nop
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr

080029d6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029d6:	b480      	push	{r7}
 80029d8:	b085      	sub	sp, #20
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68da      	ldr	r2, [r3, #12]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f042 0201 	orr.w	r2, r2, #1
 80029ec:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f003 0307 	and.w	r3, r3, #7
 80029f8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2b06      	cmp	r3, #6
 80029fe:	d007      	beq.n	8002a10 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f042 0201 	orr.w	r2, r2, #1
 8002a0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3714      	adds	r7, #20
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr

08002a1e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b082      	sub	sp, #8
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d122      	bne.n	8002a7a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d11b      	bne.n	8002a7a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f06f 0202 	mvn.w	r2, #2
 8002a4a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	f003 0303 	and.w	r3, r3, #3
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d003      	beq.n	8002a68 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 f8ee 	bl	8002c42 <HAL_TIM_IC_CaptureCallback>
 8002a66:	e005      	b.n	8002a74 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f000 f8e0 	bl	8002c2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 f8f1 	bl	8002c56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	f003 0304 	and.w	r3, r3, #4
 8002a84:	2b04      	cmp	r3, #4
 8002a86:	d122      	bne.n	8002ace <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	f003 0304 	and.w	r3, r3, #4
 8002a92:	2b04      	cmp	r3, #4
 8002a94:	d11b      	bne.n	8002ace <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f06f 0204 	mvn.w	r2, #4
 8002a9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d003      	beq.n	8002abc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f000 f8c4 	bl	8002c42 <HAL_TIM_IC_CaptureCallback>
 8002aba:	e005      	b.n	8002ac8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f000 f8b6 	bl	8002c2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f8c7 	bl	8002c56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	f003 0308 	and.w	r3, r3, #8
 8002ad8:	2b08      	cmp	r3, #8
 8002ada:	d122      	bne.n	8002b22 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	f003 0308 	and.w	r3, r3, #8
 8002ae6:	2b08      	cmp	r3, #8
 8002ae8:	d11b      	bne.n	8002b22 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f06f 0208 	mvn.w	r2, #8
 8002af2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2204      	movs	r2, #4
 8002af8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	69db      	ldr	r3, [r3, #28]
 8002b00:	f003 0303 	and.w	r3, r3, #3
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d003      	beq.n	8002b10 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f000 f89a 	bl	8002c42 <HAL_TIM_IC_CaptureCallback>
 8002b0e:	e005      	b.n	8002b1c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f000 f88c 	bl	8002c2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f89d 	bl	8002c56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	f003 0310 	and.w	r3, r3, #16
 8002b2c:	2b10      	cmp	r3, #16
 8002b2e:	d122      	bne.n	8002b76 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	f003 0310 	and.w	r3, r3, #16
 8002b3a:	2b10      	cmp	r3, #16
 8002b3c:	d11b      	bne.n	8002b76 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f06f 0210 	mvn.w	r2, #16
 8002b46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2208      	movs	r2, #8
 8002b4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	69db      	ldr	r3, [r3, #28]
 8002b54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d003      	beq.n	8002b64 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f000 f870 	bl	8002c42 <HAL_TIM_IC_CaptureCallback>
 8002b62:	e005      	b.n	8002b70 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 f862 	bl	8002c2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f873 	bl	8002c56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	f003 0301 	and.w	r3, r3, #1
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d10e      	bne.n	8002ba2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d107      	bne.n	8002ba2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f06f 0201 	mvn.w	r2, #1
 8002b9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f7fe fc53 	bl	8001448 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bac:	2b80      	cmp	r3, #128	; 0x80
 8002bae:	d10e      	bne.n	8002bce <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bba:	2b80      	cmp	r3, #128	; 0x80
 8002bbc:	d107      	bne.n	8002bce <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002bc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 f903 	bl	8002dd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd8:	2b40      	cmp	r3, #64	; 0x40
 8002bda:	d10e      	bne.n	8002bfa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be6:	2b40      	cmp	r3, #64	; 0x40
 8002be8:	d107      	bne.n	8002bfa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002bf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f000 f838 	bl	8002c6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	f003 0320 	and.w	r3, r3, #32
 8002c04:	2b20      	cmp	r3, #32
 8002c06:	d10e      	bne.n	8002c26 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	f003 0320 	and.w	r3, r3, #32
 8002c12:	2b20      	cmp	r3, #32
 8002c14:	d107      	bne.n	8002c26 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f06f 0220 	mvn.w	r2, #32
 8002c1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f000 f8cd 	bl	8002dc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c26:	bf00      	nop
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	b083      	sub	sp, #12
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c36:	bf00      	nop
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr

08002c42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c42:	b480      	push	{r7}
 8002c44:	b083      	sub	sp, #12
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c4a:	bf00      	nop
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr

08002c56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c56:	b480      	push	{r7}
 8002c58:	b083      	sub	sp, #12
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr

08002c6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b083      	sub	sp, #12
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c72:	bf00      	nop
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
	...

08002c80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a40      	ldr	r2, [pc, #256]	; (8002d94 <TIM_Base_SetConfig+0x114>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d013      	beq.n	8002cc0 <TIM_Base_SetConfig+0x40>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c9e:	d00f      	beq.n	8002cc0 <TIM_Base_SetConfig+0x40>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a3d      	ldr	r2, [pc, #244]	; (8002d98 <TIM_Base_SetConfig+0x118>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d00b      	beq.n	8002cc0 <TIM_Base_SetConfig+0x40>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a3c      	ldr	r2, [pc, #240]	; (8002d9c <TIM_Base_SetConfig+0x11c>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d007      	beq.n	8002cc0 <TIM_Base_SetConfig+0x40>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a3b      	ldr	r2, [pc, #236]	; (8002da0 <TIM_Base_SetConfig+0x120>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d003      	beq.n	8002cc0 <TIM_Base_SetConfig+0x40>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a3a      	ldr	r2, [pc, #232]	; (8002da4 <TIM_Base_SetConfig+0x124>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d108      	bne.n	8002cd2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a2f      	ldr	r2, [pc, #188]	; (8002d94 <TIM_Base_SetConfig+0x114>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d02b      	beq.n	8002d32 <TIM_Base_SetConfig+0xb2>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ce0:	d027      	beq.n	8002d32 <TIM_Base_SetConfig+0xb2>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a2c      	ldr	r2, [pc, #176]	; (8002d98 <TIM_Base_SetConfig+0x118>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d023      	beq.n	8002d32 <TIM_Base_SetConfig+0xb2>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a2b      	ldr	r2, [pc, #172]	; (8002d9c <TIM_Base_SetConfig+0x11c>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d01f      	beq.n	8002d32 <TIM_Base_SetConfig+0xb2>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a2a      	ldr	r2, [pc, #168]	; (8002da0 <TIM_Base_SetConfig+0x120>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d01b      	beq.n	8002d32 <TIM_Base_SetConfig+0xb2>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a29      	ldr	r2, [pc, #164]	; (8002da4 <TIM_Base_SetConfig+0x124>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d017      	beq.n	8002d32 <TIM_Base_SetConfig+0xb2>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a28      	ldr	r2, [pc, #160]	; (8002da8 <TIM_Base_SetConfig+0x128>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d013      	beq.n	8002d32 <TIM_Base_SetConfig+0xb2>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a27      	ldr	r2, [pc, #156]	; (8002dac <TIM_Base_SetConfig+0x12c>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d00f      	beq.n	8002d32 <TIM_Base_SetConfig+0xb2>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a26      	ldr	r2, [pc, #152]	; (8002db0 <TIM_Base_SetConfig+0x130>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d00b      	beq.n	8002d32 <TIM_Base_SetConfig+0xb2>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a25      	ldr	r2, [pc, #148]	; (8002db4 <TIM_Base_SetConfig+0x134>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d007      	beq.n	8002d32 <TIM_Base_SetConfig+0xb2>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a24      	ldr	r2, [pc, #144]	; (8002db8 <TIM_Base_SetConfig+0x138>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d003      	beq.n	8002d32 <TIM_Base_SetConfig+0xb2>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a23      	ldr	r2, [pc, #140]	; (8002dbc <TIM_Base_SetConfig+0x13c>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d108      	bne.n	8002d44 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	689a      	ldr	r2, [r3, #8]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a0a      	ldr	r2, [pc, #40]	; (8002d94 <TIM_Base_SetConfig+0x114>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d003      	beq.n	8002d78 <TIM_Base_SetConfig+0xf8>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a0c      	ldr	r2, [pc, #48]	; (8002da4 <TIM_Base_SetConfig+0x124>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d103      	bne.n	8002d80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	691a      	ldr	r2, [r3, #16]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	615a      	str	r2, [r3, #20]
}
 8002d86:	bf00      	nop
 8002d88:	3714      	adds	r7, #20
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	40010000 	.word	0x40010000
 8002d98:	40000400 	.word	0x40000400
 8002d9c:	40000800 	.word	0x40000800
 8002da0:	40000c00 	.word	0x40000c00
 8002da4:	40010400 	.word	0x40010400
 8002da8:	40014000 	.word	0x40014000
 8002dac:	40014400 	.word	0x40014400
 8002db0:	40014800 	.word	0x40014800
 8002db4:	40001800 	.word	0x40001800
 8002db8:	40001c00 	.word	0x40001c00
 8002dbc:	40002000 	.word	0x40002000

08002dc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	4603      	mov	r3, r0
 8002df0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002df2:	2300      	movs	r3, #0
 8002df4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002df6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002dfa:	2b84      	cmp	r3, #132	; 0x84
 8002dfc:	d005      	beq.n	8002e0a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002dfe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	4413      	add	r3, r2
 8002e06:	3303      	adds	r3, #3
 8002e08:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3714      	adds	r7, #20
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002e1c:	f000 fada 	bl	80033d4 <vTaskStartScheduler>
  
  return osOK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002e26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e28:	b089      	sub	sp, #36	; 0x24
 8002e2a:	af04      	add	r7, sp, #16
 8002e2c:	6078      	str	r0, [r7, #4]
 8002e2e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	695b      	ldr	r3, [r3, #20]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d020      	beq.n	8002e7a <osThreadCreate+0x54>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d01c      	beq.n	8002e7a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685c      	ldr	r4, [r3, #4]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681d      	ldr	r5, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	691e      	ldr	r6, [r3, #16]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7ff ffc8 	bl	8002de8 <makeFreeRtosPriority>
 8002e58:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002e62:	9202      	str	r2, [sp, #8]
 8002e64:	9301      	str	r3, [sp, #4]
 8002e66:	9100      	str	r1, [sp, #0]
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	4632      	mov	r2, r6
 8002e6c:	4629      	mov	r1, r5
 8002e6e:	4620      	mov	r0, r4
 8002e70:	f000 f8ed 	bl	800304e <xTaskCreateStatic>
 8002e74:	4603      	mov	r3, r0
 8002e76:	60fb      	str	r3, [r7, #12]
 8002e78:	e01c      	b.n	8002eb4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685c      	ldr	r4, [r3, #4]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002e86:	b29e      	uxth	r6, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7ff ffaa 	bl	8002de8 <makeFreeRtosPriority>
 8002e94:	4602      	mov	r2, r0
 8002e96:	f107 030c 	add.w	r3, r7, #12
 8002e9a:	9301      	str	r3, [sp, #4]
 8002e9c:	9200      	str	r2, [sp, #0]
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	4632      	mov	r2, r6
 8002ea2:	4629      	mov	r1, r5
 8002ea4:	4620      	mov	r0, r4
 8002ea6:	f000 f92c 	bl	8003102 <xTaskCreate>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d001      	beq.n	8002eb4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	e000      	b.n	8002eb6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3714      	adds	r7, #20
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ebe <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b084      	sub	sp, #16
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <osDelay+0x16>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	e000      	b.n	8002ed6 <osDelay+0x18>
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f000 fa48 	bl	800336c <vTaskDelay>
  
  return osOK;
 8002edc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3710      	adds	r7, #16
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	b083      	sub	sp, #12
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f103 0208 	add.w	r2, r3, #8
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f04f 32ff 	mov.w	r2, #4294967295
 8002efe:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f103 0208 	add.w	r2, r3, #8
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f103 0208 	add.w	r2, r3, #8
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002f1a:	bf00      	nop
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr

08002f26 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002f26:	b480      	push	{r7}
 8002f28:	b083      	sub	sp, #12
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	689a      	ldr	r2, [r3, #8]
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	683a      	ldr	r2, [r7, #0]
 8002f64:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	1c5a      	adds	r2, r3, #1
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	601a      	str	r2, [r3, #0]
}
 8002f7c:	bf00      	nop
 8002f7e:	3714      	adds	r7, #20
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f9e:	d103      	bne.n	8002fa8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	691b      	ldr	r3, [r3, #16]
 8002fa4:	60fb      	str	r3, [r7, #12]
 8002fa6:	e00c      	b.n	8002fc2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	3308      	adds	r3, #8
 8002fac:	60fb      	str	r3, [r7, #12]
 8002fae:	e002      	b.n	8002fb6 <vListInsert+0x2e>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	60fb      	str	r3, [r7, #12]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68ba      	ldr	r2, [r7, #8]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d2f6      	bcs.n	8002fb0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	685a      	ldr	r2, [r3, #4]
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	683a      	ldr	r2, [r7, #0]
 8002fd0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	683a      	ldr	r2, [r7, #0]
 8002fdc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	1c5a      	adds	r2, r3, #1
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	601a      	str	r2, [r3, #0]
}
 8002fee:	bf00      	nop
 8002ff0:	3714      	adds	r7, #20
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr

08002ffa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	b085      	sub	sp, #20
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	6892      	ldr	r2, [r2, #8]
 8003010:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	6852      	ldr	r2, [r2, #4]
 800301a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	429a      	cmp	r2, r3
 8003024:	d103      	bne.n	800302e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	689a      	ldr	r2, [r3, #8]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	1e5a      	subs	r2, r3, #1
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
}
 8003042:	4618      	mov	r0, r3
 8003044:	3714      	adds	r7, #20
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr

0800304e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800304e:	b580      	push	{r7, lr}
 8003050:	b08e      	sub	sp, #56	; 0x38
 8003052:	af04      	add	r7, sp, #16
 8003054:	60f8      	str	r0, [r7, #12]
 8003056:	60b9      	str	r1, [r7, #8]
 8003058:	607a      	str	r2, [r7, #4]
 800305a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800305c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800305e:	2b00      	cmp	r3, #0
 8003060:	d109      	bne.n	8003076 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003066:	f383 8811 	msr	BASEPRI, r3
 800306a:	f3bf 8f6f 	isb	sy
 800306e:	f3bf 8f4f 	dsb	sy
 8003072:	623b      	str	r3, [r7, #32]
 8003074:	e7fe      	b.n	8003074 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003078:	2b00      	cmp	r3, #0
 800307a:	d109      	bne.n	8003090 <xTaskCreateStatic+0x42>
 800307c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003080:	f383 8811 	msr	BASEPRI, r3
 8003084:	f3bf 8f6f 	isb	sy
 8003088:	f3bf 8f4f 	dsb	sy
 800308c:	61fb      	str	r3, [r7, #28]
 800308e:	e7fe      	b.n	800308e <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003090:	2354      	movs	r3, #84	; 0x54
 8003092:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	2b54      	cmp	r3, #84	; 0x54
 8003098:	d009      	beq.n	80030ae <xTaskCreateStatic+0x60>
 800309a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800309e:	f383 8811 	msr	BASEPRI, r3
 80030a2:	f3bf 8f6f 	isb	sy
 80030a6:	f3bf 8f4f 	dsb	sy
 80030aa:	61bb      	str	r3, [r7, #24]
 80030ac:	e7fe      	b.n	80030ac <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80030ae:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80030b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d01e      	beq.n	80030f4 <xTaskCreateStatic+0xa6>
 80030b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d01b      	beq.n	80030f4 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80030bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030be:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80030c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030c4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80030c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c8:	2202      	movs	r2, #2
 80030ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80030ce:	2300      	movs	r3, #0
 80030d0:	9303      	str	r3, [sp, #12]
 80030d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d4:	9302      	str	r3, [sp, #8]
 80030d6:	f107 0314 	add.w	r3, r7, #20
 80030da:	9301      	str	r3, [sp, #4]
 80030dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030de:	9300      	str	r3, [sp, #0]
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	68b9      	ldr	r1, [r7, #8]
 80030e6:	68f8      	ldr	r0, [r7, #12]
 80030e8:	f000 f850 	bl	800318c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80030ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80030ee:	f000 f8d3 	bl	8003298 <prvAddNewTaskToReadyList>
 80030f2:	e001      	b.n	80030f8 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80030f4:	2300      	movs	r3, #0
 80030f6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80030f8:	697b      	ldr	r3, [r7, #20]
	}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3728      	adds	r7, #40	; 0x28
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003102:	b580      	push	{r7, lr}
 8003104:	b08c      	sub	sp, #48	; 0x30
 8003106:	af04      	add	r7, sp, #16
 8003108:	60f8      	str	r0, [r7, #12]
 800310a:	60b9      	str	r1, [r7, #8]
 800310c:	603b      	str	r3, [r7, #0]
 800310e:	4613      	mov	r3, r2
 8003110:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003112:	88fb      	ldrh	r3, [r7, #6]
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4618      	mov	r0, r3
 8003118:	f000 feb4 	bl	8003e84 <pvPortMalloc>
 800311c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d00e      	beq.n	8003142 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003124:	2054      	movs	r0, #84	; 0x54
 8003126:	f000 fead 	bl	8003e84 <pvPortMalloc>
 800312a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d003      	beq.n	800313a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	697a      	ldr	r2, [r7, #20]
 8003136:	631a      	str	r2, [r3, #48]	; 0x30
 8003138:	e005      	b.n	8003146 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800313a:	6978      	ldr	r0, [r7, #20]
 800313c:	f000 ff64 	bl	8004008 <vPortFree>
 8003140:	e001      	b.n	8003146 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003142:	2300      	movs	r3, #0
 8003144:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d017      	beq.n	800317c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003154:	88fa      	ldrh	r2, [r7, #6]
 8003156:	2300      	movs	r3, #0
 8003158:	9303      	str	r3, [sp, #12]
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	9302      	str	r3, [sp, #8]
 800315e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003160:	9301      	str	r3, [sp, #4]
 8003162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003164:	9300      	str	r3, [sp, #0]
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	68b9      	ldr	r1, [r7, #8]
 800316a:	68f8      	ldr	r0, [r7, #12]
 800316c:	f000 f80e 	bl	800318c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003170:	69f8      	ldr	r0, [r7, #28]
 8003172:	f000 f891 	bl	8003298 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003176:	2301      	movs	r3, #1
 8003178:	61bb      	str	r3, [r7, #24]
 800317a:	e002      	b.n	8003182 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800317c:	f04f 33ff 	mov.w	r3, #4294967295
 8003180:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003182:	69bb      	ldr	r3, [r7, #24]
	}
 8003184:	4618      	mov	r0, r3
 8003186:	3720      	adds	r7, #32
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b088      	sub	sp, #32
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
 8003198:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800319a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800319c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80031a4:	3b01      	subs	r3, #1
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	4413      	add	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	f023 0307 	bic.w	r3, r3, #7
 80031b2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	f003 0307 	and.w	r3, r3, #7
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d009      	beq.n	80031d2 <prvInitialiseNewTask+0x46>
 80031be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c2:	f383 8811 	msr	BASEPRI, r3
 80031c6:	f3bf 8f6f 	isb	sy
 80031ca:	f3bf 8f4f 	dsb	sy
 80031ce:	617b      	str	r3, [r7, #20]
 80031d0:	e7fe      	b.n	80031d0 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d01f      	beq.n	8003218 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80031d8:	2300      	movs	r3, #0
 80031da:	61fb      	str	r3, [r7, #28]
 80031dc:	e012      	b.n	8003204 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80031de:	68ba      	ldr	r2, [r7, #8]
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	4413      	add	r3, r2
 80031e4:	7819      	ldrb	r1, [r3, #0]
 80031e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	4413      	add	r3, r2
 80031ec:	3334      	adds	r3, #52	; 0x34
 80031ee:	460a      	mov	r2, r1
 80031f0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80031f2:	68ba      	ldr	r2, [r7, #8]
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	4413      	add	r3, r2
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d006      	beq.n	800320c <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	3301      	adds	r3, #1
 8003202:	61fb      	str	r3, [r7, #28]
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	2b0f      	cmp	r3, #15
 8003208:	d9e9      	bls.n	80031de <prvInitialiseNewTask+0x52>
 800320a:	e000      	b.n	800320e <prvInitialiseNewTask+0x82>
			{
				break;
 800320c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800320e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003210:	2200      	movs	r2, #0
 8003212:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003216:	e003      	b.n	8003220 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800321a:	2200      	movs	r2, #0
 800321c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003222:	2b06      	cmp	r3, #6
 8003224:	d901      	bls.n	800322a <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003226:	2306      	movs	r3, #6
 8003228:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800322a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800322c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800322e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003232:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003234:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003238:	2200      	movs	r2, #0
 800323a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800323c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323e:	3304      	adds	r3, #4
 8003240:	4618      	mov	r0, r3
 8003242:	f7ff fe70 	bl	8002f26 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003248:	3318      	adds	r3, #24
 800324a:	4618      	mov	r0, r3
 800324c:	f7ff fe6b 	bl	8002f26 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003252:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003254:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003258:	f1c3 0207 	rsb	r2, r3, #7
 800325c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800325e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003262:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003264:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003268:	2200      	movs	r2, #0
 800326a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800326c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800326e:	2200      	movs	r2, #0
 8003270:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003274:	683a      	ldr	r2, [r7, #0]
 8003276:	68f9      	ldr	r1, [r7, #12]
 8003278:	69b8      	ldr	r0, [r7, #24]
 800327a:	f000 fbfd 	bl	8003a78 <pxPortInitialiseStack>
 800327e:	4602      	mov	r2, r0
 8003280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003282:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003286:	2b00      	cmp	r3, #0
 8003288:	d002      	beq.n	8003290 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800328a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800328c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800328e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003290:	bf00      	nop
 8003292:	3720      	adds	r7, #32
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80032a0:	f000 fd14 	bl	8003ccc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80032a4:	4b2a      	ldr	r3, [pc, #168]	; (8003350 <prvAddNewTaskToReadyList+0xb8>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	3301      	adds	r3, #1
 80032aa:	4a29      	ldr	r2, [pc, #164]	; (8003350 <prvAddNewTaskToReadyList+0xb8>)
 80032ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80032ae:	4b29      	ldr	r3, [pc, #164]	; (8003354 <prvAddNewTaskToReadyList+0xbc>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d109      	bne.n	80032ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80032b6:	4a27      	ldr	r2, [pc, #156]	; (8003354 <prvAddNewTaskToReadyList+0xbc>)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80032bc:	4b24      	ldr	r3, [pc, #144]	; (8003350 <prvAddNewTaskToReadyList+0xb8>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d110      	bne.n	80032e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80032c4:	f000 fab8 	bl	8003838 <prvInitialiseTaskLists>
 80032c8:	e00d      	b.n	80032e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80032ca:	4b23      	ldr	r3, [pc, #140]	; (8003358 <prvAddNewTaskToReadyList+0xc0>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d109      	bne.n	80032e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80032d2:	4b20      	ldr	r3, [pc, #128]	; (8003354 <prvAddNewTaskToReadyList+0xbc>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032dc:	429a      	cmp	r2, r3
 80032de:	d802      	bhi.n	80032e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80032e0:	4a1c      	ldr	r2, [pc, #112]	; (8003354 <prvAddNewTaskToReadyList+0xbc>)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80032e6:	4b1d      	ldr	r3, [pc, #116]	; (800335c <prvAddNewTaskToReadyList+0xc4>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	3301      	adds	r3, #1
 80032ec:	4a1b      	ldr	r2, [pc, #108]	; (800335c <prvAddNewTaskToReadyList+0xc4>)
 80032ee:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f4:	2201      	movs	r2, #1
 80032f6:	409a      	lsls	r2, r3
 80032f8:	4b19      	ldr	r3, [pc, #100]	; (8003360 <prvAddNewTaskToReadyList+0xc8>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	4a18      	ldr	r2, [pc, #96]	; (8003360 <prvAddNewTaskToReadyList+0xc8>)
 8003300:	6013      	str	r3, [r2, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003306:	4613      	mov	r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	4413      	add	r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	4a15      	ldr	r2, [pc, #84]	; (8003364 <prvAddNewTaskToReadyList+0xcc>)
 8003310:	441a      	add	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	3304      	adds	r3, #4
 8003316:	4619      	mov	r1, r3
 8003318:	4610      	mov	r0, r2
 800331a:	f7ff fe11 	bl	8002f40 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800331e:	f000 fd03 	bl	8003d28 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003322:	4b0d      	ldr	r3, [pc, #52]	; (8003358 <prvAddNewTaskToReadyList+0xc0>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00e      	beq.n	8003348 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800332a:	4b0a      	ldr	r3, [pc, #40]	; (8003354 <prvAddNewTaskToReadyList+0xbc>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003334:	429a      	cmp	r2, r3
 8003336:	d207      	bcs.n	8003348 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003338:	4b0b      	ldr	r3, [pc, #44]	; (8003368 <prvAddNewTaskToReadyList+0xd0>)
 800333a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800333e:	601a      	str	r2, [r3, #0]
 8003340:	f3bf 8f4f 	dsb	sy
 8003344:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003348:	bf00      	nop
 800334a:	3708      	adds	r7, #8
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	2000040c 	.word	0x2000040c
 8003354:	2000030c 	.word	0x2000030c
 8003358:	20000418 	.word	0x20000418
 800335c:	20000428 	.word	0x20000428
 8003360:	20000414 	.word	0x20000414
 8003364:	20000310 	.word	0x20000310
 8003368:	e000ed04 	.word	0xe000ed04

0800336c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003374:	2300      	movs	r3, #0
 8003376:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d016      	beq.n	80033ac <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800337e:	4b13      	ldr	r3, [pc, #76]	; (80033cc <vTaskDelay+0x60>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d009      	beq.n	800339a <vTaskDelay+0x2e>
 8003386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800338a:	f383 8811 	msr	BASEPRI, r3
 800338e:	f3bf 8f6f 	isb	sy
 8003392:	f3bf 8f4f 	dsb	sy
 8003396:	60bb      	str	r3, [r7, #8]
 8003398:	e7fe      	b.n	8003398 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800339a:	f000 f879 	bl	8003490 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800339e:	2100      	movs	r1, #0
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f000 fb03 	bl	80039ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80033a6:	f000 f881 	bl	80034ac <xTaskResumeAll>
 80033aa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d107      	bne.n	80033c2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80033b2:	4b07      	ldr	r3, [pc, #28]	; (80033d0 <vTaskDelay+0x64>)
 80033b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033b8:	601a      	str	r2, [r3, #0]
 80033ba:	f3bf 8f4f 	dsb	sy
 80033be:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80033c2:	bf00      	nop
 80033c4:	3710      	adds	r7, #16
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	20000434 	.word	0x20000434
 80033d0:	e000ed04 	.word	0xe000ed04

080033d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b08a      	sub	sp, #40	; 0x28
 80033d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80033da:	2300      	movs	r3, #0
 80033dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80033de:	2300      	movs	r3, #0
 80033e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80033e2:	463a      	mov	r2, r7
 80033e4:	1d39      	adds	r1, r7, #4
 80033e6:	f107 0308 	add.w	r3, r7, #8
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7fd fcce 	bl	8000d8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80033f0:	6839      	ldr	r1, [r7, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	68ba      	ldr	r2, [r7, #8]
 80033f6:	9202      	str	r2, [sp, #8]
 80033f8:	9301      	str	r3, [sp, #4]
 80033fa:	2300      	movs	r3, #0
 80033fc:	9300      	str	r3, [sp, #0]
 80033fe:	2300      	movs	r3, #0
 8003400:	460a      	mov	r2, r1
 8003402:	491d      	ldr	r1, [pc, #116]	; (8003478 <vTaskStartScheduler+0xa4>)
 8003404:	481d      	ldr	r0, [pc, #116]	; (800347c <vTaskStartScheduler+0xa8>)
 8003406:	f7ff fe22 	bl	800304e <xTaskCreateStatic>
 800340a:	4602      	mov	r2, r0
 800340c:	4b1c      	ldr	r3, [pc, #112]	; (8003480 <vTaskStartScheduler+0xac>)
 800340e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003410:	4b1b      	ldr	r3, [pc, #108]	; (8003480 <vTaskStartScheduler+0xac>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d002      	beq.n	800341e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003418:	2301      	movs	r3, #1
 800341a:	617b      	str	r3, [r7, #20]
 800341c:	e001      	b.n	8003422 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800341e:	2300      	movs	r3, #0
 8003420:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d115      	bne.n	8003454 <vTaskStartScheduler+0x80>
 8003428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800342c:	f383 8811 	msr	BASEPRI, r3
 8003430:	f3bf 8f6f 	isb	sy
 8003434:	f3bf 8f4f 	dsb	sy
 8003438:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800343a:	4b12      	ldr	r3, [pc, #72]	; (8003484 <vTaskStartScheduler+0xb0>)
 800343c:	f04f 32ff 	mov.w	r2, #4294967295
 8003440:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003442:	4b11      	ldr	r3, [pc, #68]	; (8003488 <vTaskStartScheduler+0xb4>)
 8003444:	2201      	movs	r2, #1
 8003446:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003448:	4b10      	ldr	r3, [pc, #64]	; (800348c <vTaskStartScheduler+0xb8>)
 800344a:	2200      	movs	r2, #0
 800344c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800344e:	f000 fb9f 	bl	8003b90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003452:	e00d      	b.n	8003470 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800345a:	d109      	bne.n	8003470 <vTaskStartScheduler+0x9c>
 800345c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003460:	f383 8811 	msr	BASEPRI, r3
 8003464:	f3bf 8f6f 	isb	sy
 8003468:	f3bf 8f4f 	dsb	sy
 800346c:	60fb      	str	r3, [r7, #12]
 800346e:	e7fe      	b.n	800346e <vTaskStartScheduler+0x9a>
}
 8003470:	bf00      	nop
 8003472:	3718      	adds	r7, #24
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	080042f0 	.word	0x080042f0
 800347c:	08003809 	.word	0x08003809
 8003480:	20000430 	.word	0x20000430
 8003484:	2000042c 	.word	0x2000042c
 8003488:	20000418 	.word	0x20000418
 800348c:	20000410 	.word	0x20000410

08003490 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003494:	4b04      	ldr	r3, [pc, #16]	; (80034a8 <vTaskSuspendAll+0x18>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	3301      	adds	r3, #1
 800349a:	4a03      	ldr	r2, [pc, #12]	; (80034a8 <vTaskSuspendAll+0x18>)
 800349c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800349e:	bf00      	nop
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr
 80034a8:	20000434 	.word	0x20000434

080034ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80034b2:	2300      	movs	r3, #0
 80034b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80034b6:	2300      	movs	r3, #0
 80034b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80034ba:	4b41      	ldr	r3, [pc, #260]	; (80035c0 <xTaskResumeAll+0x114>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d109      	bne.n	80034d6 <xTaskResumeAll+0x2a>
 80034c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c6:	f383 8811 	msr	BASEPRI, r3
 80034ca:	f3bf 8f6f 	isb	sy
 80034ce:	f3bf 8f4f 	dsb	sy
 80034d2:	603b      	str	r3, [r7, #0]
 80034d4:	e7fe      	b.n	80034d4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80034d6:	f000 fbf9 	bl	8003ccc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80034da:	4b39      	ldr	r3, [pc, #228]	; (80035c0 <xTaskResumeAll+0x114>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	3b01      	subs	r3, #1
 80034e0:	4a37      	ldr	r2, [pc, #220]	; (80035c0 <xTaskResumeAll+0x114>)
 80034e2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034e4:	4b36      	ldr	r3, [pc, #216]	; (80035c0 <xTaskResumeAll+0x114>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d161      	bne.n	80035b0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80034ec:	4b35      	ldr	r3, [pc, #212]	; (80035c4 <xTaskResumeAll+0x118>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d05d      	beq.n	80035b0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80034f4:	e02e      	b.n	8003554 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034f6:	4b34      	ldr	r3, [pc, #208]	; (80035c8 <xTaskResumeAll+0x11c>)
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	3318      	adds	r3, #24
 8003502:	4618      	mov	r0, r3
 8003504:	f7ff fd79 	bl	8002ffa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	3304      	adds	r3, #4
 800350c:	4618      	mov	r0, r3
 800350e:	f7ff fd74 	bl	8002ffa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003516:	2201      	movs	r2, #1
 8003518:	409a      	lsls	r2, r3
 800351a:	4b2c      	ldr	r3, [pc, #176]	; (80035cc <xTaskResumeAll+0x120>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4313      	orrs	r3, r2
 8003520:	4a2a      	ldr	r2, [pc, #168]	; (80035cc <xTaskResumeAll+0x120>)
 8003522:	6013      	str	r3, [r2, #0]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003528:	4613      	mov	r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	4413      	add	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	4a27      	ldr	r2, [pc, #156]	; (80035d0 <xTaskResumeAll+0x124>)
 8003532:	441a      	add	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	3304      	adds	r3, #4
 8003538:	4619      	mov	r1, r3
 800353a:	4610      	mov	r0, r2
 800353c:	f7ff fd00 	bl	8002f40 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003544:	4b23      	ldr	r3, [pc, #140]	; (80035d4 <xTaskResumeAll+0x128>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354a:	429a      	cmp	r2, r3
 800354c:	d302      	bcc.n	8003554 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800354e:	4b22      	ldr	r3, [pc, #136]	; (80035d8 <xTaskResumeAll+0x12c>)
 8003550:	2201      	movs	r2, #1
 8003552:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003554:	4b1c      	ldr	r3, [pc, #112]	; (80035c8 <xTaskResumeAll+0x11c>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1cc      	bne.n	80034f6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003562:	f000 fa03 	bl	800396c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003566:	4b1d      	ldr	r3, [pc, #116]	; (80035dc <xTaskResumeAll+0x130>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d010      	beq.n	8003594 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003572:	f000 f837 	bl	80035e4 <xTaskIncrementTick>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d002      	beq.n	8003582 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800357c:	4b16      	ldr	r3, [pc, #88]	; (80035d8 <xTaskResumeAll+0x12c>)
 800357e:	2201      	movs	r2, #1
 8003580:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	3b01      	subs	r3, #1
 8003586:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1f1      	bne.n	8003572 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800358e:	4b13      	ldr	r3, [pc, #76]	; (80035dc <xTaskResumeAll+0x130>)
 8003590:	2200      	movs	r2, #0
 8003592:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003594:	4b10      	ldr	r3, [pc, #64]	; (80035d8 <xTaskResumeAll+0x12c>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d009      	beq.n	80035b0 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800359c:	2301      	movs	r3, #1
 800359e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80035a0:	4b0f      	ldr	r3, [pc, #60]	; (80035e0 <xTaskResumeAll+0x134>)
 80035a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035a6:	601a      	str	r2, [r3, #0]
 80035a8:	f3bf 8f4f 	dsb	sy
 80035ac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80035b0:	f000 fbba 	bl	8003d28 <vPortExitCritical>

	return xAlreadyYielded;
 80035b4:	68bb      	ldr	r3, [r7, #8]
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	20000434 	.word	0x20000434
 80035c4:	2000040c 	.word	0x2000040c
 80035c8:	200003cc 	.word	0x200003cc
 80035cc:	20000414 	.word	0x20000414
 80035d0:	20000310 	.word	0x20000310
 80035d4:	2000030c 	.word	0x2000030c
 80035d8:	20000420 	.word	0x20000420
 80035dc:	2000041c 	.word	0x2000041c
 80035e0:	e000ed04 	.word	0xe000ed04

080035e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80035ea:	2300      	movs	r3, #0
 80035ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035ee:	4b4e      	ldr	r3, [pc, #312]	; (8003728 <xTaskIncrementTick+0x144>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	f040 8087 	bne.w	8003706 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80035f8:	4b4c      	ldr	r3, [pc, #304]	; (800372c <xTaskIncrementTick+0x148>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	3301      	adds	r3, #1
 80035fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003600:	4a4a      	ldr	r2, [pc, #296]	; (800372c <xTaskIncrementTick+0x148>)
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d11f      	bne.n	800364c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800360c:	4b48      	ldr	r3, [pc, #288]	; (8003730 <xTaskIncrementTick+0x14c>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d009      	beq.n	800362a <xTaskIncrementTick+0x46>
 8003616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800361a:	f383 8811 	msr	BASEPRI, r3
 800361e:	f3bf 8f6f 	isb	sy
 8003622:	f3bf 8f4f 	dsb	sy
 8003626:	603b      	str	r3, [r7, #0]
 8003628:	e7fe      	b.n	8003628 <xTaskIncrementTick+0x44>
 800362a:	4b41      	ldr	r3, [pc, #260]	; (8003730 <xTaskIncrementTick+0x14c>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	60fb      	str	r3, [r7, #12]
 8003630:	4b40      	ldr	r3, [pc, #256]	; (8003734 <xTaskIncrementTick+0x150>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a3e      	ldr	r2, [pc, #248]	; (8003730 <xTaskIncrementTick+0x14c>)
 8003636:	6013      	str	r3, [r2, #0]
 8003638:	4a3e      	ldr	r2, [pc, #248]	; (8003734 <xTaskIncrementTick+0x150>)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6013      	str	r3, [r2, #0]
 800363e:	4b3e      	ldr	r3, [pc, #248]	; (8003738 <xTaskIncrementTick+0x154>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	3301      	adds	r3, #1
 8003644:	4a3c      	ldr	r2, [pc, #240]	; (8003738 <xTaskIncrementTick+0x154>)
 8003646:	6013      	str	r3, [r2, #0]
 8003648:	f000 f990 	bl	800396c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800364c:	4b3b      	ldr	r3, [pc, #236]	; (800373c <xTaskIncrementTick+0x158>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	693a      	ldr	r2, [r7, #16]
 8003652:	429a      	cmp	r2, r3
 8003654:	d348      	bcc.n	80036e8 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003656:	4b36      	ldr	r3, [pc, #216]	; (8003730 <xTaskIncrementTick+0x14c>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d104      	bne.n	800366a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003660:	4b36      	ldr	r3, [pc, #216]	; (800373c <xTaskIncrementTick+0x158>)
 8003662:	f04f 32ff 	mov.w	r2, #4294967295
 8003666:	601a      	str	r2, [r3, #0]
					break;
 8003668:	e03e      	b.n	80036e8 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800366a:	4b31      	ldr	r3, [pc, #196]	; (8003730 <xTaskIncrementTick+0x14c>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	429a      	cmp	r2, r3
 8003680:	d203      	bcs.n	800368a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003682:	4a2e      	ldr	r2, [pc, #184]	; (800373c <xTaskIncrementTick+0x158>)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003688:	e02e      	b.n	80036e8 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	3304      	adds	r3, #4
 800368e:	4618      	mov	r0, r3
 8003690:	f7ff fcb3 	bl	8002ffa <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003698:	2b00      	cmp	r3, #0
 800369a:	d004      	beq.n	80036a6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	3318      	adds	r3, #24
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7ff fcaa 	bl	8002ffa <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036aa:	2201      	movs	r2, #1
 80036ac:	409a      	lsls	r2, r3
 80036ae:	4b24      	ldr	r3, [pc, #144]	; (8003740 <xTaskIncrementTick+0x15c>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	4a22      	ldr	r2, [pc, #136]	; (8003740 <xTaskIncrementTick+0x15c>)
 80036b6:	6013      	str	r3, [r2, #0]
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036bc:	4613      	mov	r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	4413      	add	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	4a1f      	ldr	r2, [pc, #124]	; (8003744 <xTaskIncrementTick+0x160>)
 80036c6:	441a      	add	r2, r3
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	3304      	adds	r3, #4
 80036cc:	4619      	mov	r1, r3
 80036ce:	4610      	mov	r0, r2
 80036d0:	f7ff fc36 	bl	8002f40 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036d8:	4b1b      	ldr	r3, [pc, #108]	; (8003748 <xTaskIncrementTick+0x164>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036de:	429a      	cmp	r2, r3
 80036e0:	d3b9      	bcc.n	8003656 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80036e2:	2301      	movs	r3, #1
 80036e4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036e6:	e7b6      	b.n	8003656 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80036e8:	4b17      	ldr	r3, [pc, #92]	; (8003748 <xTaskIncrementTick+0x164>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ee:	4915      	ldr	r1, [pc, #84]	; (8003744 <xTaskIncrementTick+0x160>)
 80036f0:	4613      	mov	r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	4413      	add	r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	440b      	add	r3, r1
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d907      	bls.n	8003710 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8003700:	2301      	movs	r3, #1
 8003702:	617b      	str	r3, [r7, #20]
 8003704:	e004      	b.n	8003710 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003706:	4b11      	ldr	r3, [pc, #68]	; (800374c <xTaskIncrementTick+0x168>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	3301      	adds	r3, #1
 800370c:	4a0f      	ldr	r2, [pc, #60]	; (800374c <xTaskIncrementTick+0x168>)
 800370e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003710:	4b0f      	ldr	r3, [pc, #60]	; (8003750 <xTaskIncrementTick+0x16c>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d001      	beq.n	800371c <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8003718:	2301      	movs	r3, #1
 800371a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800371c:	697b      	ldr	r3, [r7, #20]
}
 800371e:	4618      	mov	r0, r3
 8003720:	3718      	adds	r7, #24
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	20000434 	.word	0x20000434
 800372c:	20000410 	.word	0x20000410
 8003730:	200003c4 	.word	0x200003c4
 8003734:	200003c8 	.word	0x200003c8
 8003738:	20000424 	.word	0x20000424
 800373c:	2000042c 	.word	0x2000042c
 8003740:	20000414 	.word	0x20000414
 8003744:	20000310 	.word	0x20000310
 8003748:	2000030c 	.word	0x2000030c
 800374c:	2000041c 	.word	0x2000041c
 8003750:	20000420 	.word	0x20000420

08003754 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003754:	b480      	push	{r7}
 8003756:	b087      	sub	sp, #28
 8003758:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800375a:	4b26      	ldr	r3, [pc, #152]	; (80037f4 <vTaskSwitchContext+0xa0>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d003      	beq.n	800376a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003762:	4b25      	ldr	r3, [pc, #148]	; (80037f8 <vTaskSwitchContext+0xa4>)
 8003764:	2201      	movs	r2, #1
 8003766:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003768:	e03e      	b.n	80037e8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800376a:	4b23      	ldr	r3, [pc, #140]	; (80037f8 <vTaskSwitchContext+0xa4>)
 800376c:	2200      	movs	r2, #0
 800376e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003770:	4b22      	ldr	r3, [pc, #136]	; (80037fc <vTaskSwitchContext+0xa8>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	fab3 f383 	clz	r3, r3
 800377c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800377e:	7afb      	ldrb	r3, [r7, #11]
 8003780:	f1c3 031f 	rsb	r3, r3, #31
 8003784:	617b      	str	r3, [r7, #20]
 8003786:	491e      	ldr	r1, [pc, #120]	; (8003800 <vTaskSwitchContext+0xac>)
 8003788:	697a      	ldr	r2, [r7, #20]
 800378a:	4613      	mov	r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	4413      	add	r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	440b      	add	r3, r1
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d109      	bne.n	80037ae <vTaskSwitchContext+0x5a>
	__asm volatile
 800379a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800379e:	f383 8811 	msr	BASEPRI, r3
 80037a2:	f3bf 8f6f 	isb	sy
 80037a6:	f3bf 8f4f 	dsb	sy
 80037aa:	607b      	str	r3, [r7, #4]
 80037ac:	e7fe      	b.n	80037ac <vTaskSwitchContext+0x58>
 80037ae:	697a      	ldr	r2, [r7, #20]
 80037b0:	4613      	mov	r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	4413      	add	r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	4a11      	ldr	r2, [pc, #68]	; (8003800 <vTaskSwitchContext+0xac>)
 80037ba:	4413      	add	r3, r2
 80037bc:	613b      	str	r3, [r7, #16]
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	685a      	ldr	r2, [r3, #4]
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	605a      	str	r2, [r3, #4]
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	3308      	adds	r3, #8
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d104      	bne.n	80037de <vTaskSwitchContext+0x8a>
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	685a      	ldr	r2, [r3, #4]
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	605a      	str	r2, [r3, #4]
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	4a07      	ldr	r2, [pc, #28]	; (8003804 <vTaskSwitchContext+0xb0>)
 80037e6:	6013      	str	r3, [r2, #0]
}
 80037e8:	bf00      	nop
 80037ea:	371c      	adds	r7, #28
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr
 80037f4:	20000434 	.word	0x20000434
 80037f8:	20000420 	.word	0x20000420
 80037fc:	20000414 	.word	0x20000414
 8003800:	20000310 	.word	0x20000310
 8003804:	2000030c 	.word	0x2000030c

08003808 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003810:	f000 f852 	bl	80038b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003814:	4b06      	ldr	r3, [pc, #24]	; (8003830 <prvIdleTask+0x28>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d9f9      	bls.n	8003810 <prvIdleTask+0x8>
			{
				taskYIELD();
 800381c:	4b05      	ldr	r3, [pc, #20]	; (8003834 <prvIdleTask+0x2c>)
 800381e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003822:	601a      	str	r2, [r3, #0]
 8003824:	f3bf 8f4f 	dsb	sy
 8003828:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800382c:	e7f0      	b.n	8003810 <prvIdleTask+0x8>
 800382e:	bf00      	nop
 8003830:	20000310 	.word	0x20000310
 8003834:	e000ed04 	.word	0xe000ed04

08003838 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800383e:	2300      	movs	r3, #0
 8003840:	607b      	str	r3, [r7, #4]
 8003842:	e00c      	b.n	800385e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	4613      	mov	r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	4413      	add	r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	4a12      	ldr	r2, [pc, #72]	; (8003898 <prvInitialiseTaskLists+0x60>)
 8003850:	4413      	add	r3, r2
 8003852:	4618      	mov	r0, r3
 8003854:	f7ff fb47 	bl	8002ee6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	3301      	adds	r3, #1
 800385c:	607b      	str	r3, [r7, #4]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2b06      	cmp	r3, #6
 8003862:	d9ef      	bls.n	8003844 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003864:	480d      	ldr	r0, [pc, #52]	; (800389c <prvInitialiseTaskLists+0x64>)
 8003866:	f7ff fb3e 	bl	8002ee6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800386a:	480d      	ldr	r0, [pc, #52]	; (80038a0 <prvInitialiseTaskLists+0x68>)
 800386c:	f7ff fb3b 	bl	8002ee6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003870:	480c      	ldr	r0, [pc, #48]	; (80038a4 <prvInitialiseTaskLists+0x6c>)
 8003872:	f7ff fb38 	bl	8002ee6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003876:	480c      	ldr	r0, [pc, #48]	; (80038a8 <prvInitialiseTaskLists+0x70>)
 8003878:	f7ff fb35 	bl	8002ee6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800387c:	480b      	ldr	r0, [pc, #44]	; (80038ac <prvInitialiseTaskLists+0x74>)
 800387e:	f7ff fb32 	bl	8002ee6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003882:	4b0b      	ldr	r3, [pc, #44]	; (80038b0 <prvInitialiseTaskLists+0x78>)
 8003884:	4a05      	ldr	r2, [pc, #20]	; (800389c <prvInitialiseTaskLists+0x64>)
 8003886:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003888:	4b0a      	ldr	r3, [pc, #40]	; (80038b4 <prvInitialiseTaskLists+0x7c>)
 800388a:	4a05      	ldr	r2, [pc, #20]	; (80038a0 <prvInitialiseTaskLists+0x68>)
 800388c:	601a      	str	r2, [r3, #0]
}
 800388e:	bf00      	nop
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	20000310 	.word	0x20000310
 800389c:	2000039c 	.word	0x2000039c
 80038a0:	200003b0 	.word	0x200003b0
 80038a4:	200003cc 	.word	0x200003cc
 80038a8:	200003e0 	.word	0x200003e0
 80038ac:	200003f8 	.word	0x200003f8
 80038b0:	200003c4 	.word	0x200003c4
 80038b4:	200003c8 	.word	0x200003c8

080038b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80038be:	e019      	b.n	80038f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80038c0:	f000 fa04 	bl	8003ccc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038c4:	4b0f      	ldr	r3, [pc, #60]	; (8003904 <prvCheckTasksWaitingTermination+0x4c>)
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	3304      	adds	r3, #4
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7ff fb92 	bl	8002ffa <uxListRemove>
				--uxCurrentNumberOfTasks;
 80038d6:	4b0c      	ldr	r3, [pc, #48]	; (8003908 <prvCheckTasksWaitingTermination+0x50>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	3b01      	subs	r3, #1
 80038dc:	4a0a      	ldr	r2, [pc, #40]	; (8003908 <prvCheckTasksWaitingTermination+0x50>)
 80038de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80038e0:	4b0a      	ldr	r3, [pc, #40]	; (800390c <prvCheckTasksWaitingTermination+0x54>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	3b01      	subs	r3, #1
 80038e6:	4a09      	ldr	r2, [pc, #36]	; (800390c <prvCheckTasksWaitingTermination+0x54>)
 80038e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80038ea:	f000 fa1d 	bl	8003d28 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 f80e 	bl	8003910 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80038f4:	4b05      	ldr	r3, [pc, #20]	; (800390c <prvCheckTasksWaitingTermination+0x54>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1e1      	bne.n	80038c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80038fc:	bf00      	nop
 80038fe:	3708      	adds	r7, #8
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	200003e0 	.word	0x200003e0
 8003908:	2000040c 	.word	0x2000040c
 800390c:	200003f4 	.word	0x200003f4

08003910 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800391e:	2b00      	cmp	r3, #0
 8003920:	d108      	bne.n	8003934 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003926:	4618      	mov	r0, r3
 8003928:	f000 fb6e 	bl	8004008 <vPortFree>
				vPortFree( pxTCB );
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 fb6b 	bl	8004008 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003932:	e017      	b.n	8003964 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800393a:	2b01      	cmp	r3, #1
 800393c:	d103      	bne.n	8003946 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 fb62 	bl	8004008 <vPortFree>
	}
 8003944:	e00e      	b.n	8003964 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800394c:	2b02      	cmp	r3, #2
 800394e:	d009      	beq.n	8003964 <prvDeleteTCB+0x54>
 8003950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003954:	f383 8811 	msr	BASEPRI, r3
 8003958:	f3bf 8f6f 	isb	sy
 800395c:	f3bf 8f4f 	dsb	sy
 8003960:	60fb      	str	r3, [r7, #12]
 8003962:	e7fe      	b.n	8003962 <prvDeleteTCB+0x52>
	}
 8003964:	bf00      	nop
 8003966:	3710      	adds	r7, #16
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003972:	4b0c      	ldr	r3, [pc, #48]	; (80039a4 <prvResetNextTaskUnblockTime+0x38>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d104      	bne.n	8003986 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800397c:	4b0a      	ldr	r3, [pc, #40]	; (80039a8 <prvResetNextTaskUnblockTime+0x3c>)
 800397e:	f04f 32ff 	mov.w	r2, #4294967295
 8003982:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003984:	e008      	b.n	8003998 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003986:	4b07      	ldr	r3, [pc, #28]	; (80039a4 <prvResetNextTaskUnblockTime+0x38>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	4a04      	ldr	r2, [pc, #16]	; (80039a8 <prvResetNextTaskUnblockTime+0x3c>)
 8003996:	6013      	str	r3, [r2, #0]
}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr
 80039a4:	200003c4 	.word	0x200003c4
 80039a8:	2000042c 	.word	0x2000042c

080039ac <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80039b6:	4b29      	ldr	r3, [pc, #164]	; (8003a5c <prvAddCurrentTaskToDelayedList+0xb0>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80039bc:	4b28      	ldr	r3, [pc, #160]	; (8003a60 <prvAddCurrentTaskToDelayedList+0xb4>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	3304      	adds	r3, #4
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7ff fb19 	bl	8002ffa <uxListRemove>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d10b      	bne.n	80039e6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80039ce:	4b24      	ldr	r3, [pc, #144]	; (8003a60 <prvAddCurrentTaskToDelayedList+0xb4>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d4:	2201      	movs	r2, #1
 80039d6:	fa02 f303 	lsl.w	r3, r2, r3
 80039da:	43da      	mvns	r2, r3
 80039dc:	4b21      	ldr	r3, [pc, #132]	; (8003a64 <prvAddCurrentTaskToDelayedList+0xb8>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4013      	ands	r3, r2
 80039e2:	4a20      	ldr	r2, [pc, #128]	; (8003a64 <prvAddCurrentTaskToDelayedList+0xb8>)
 80039e4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ec:	d10a      	bne.n	8003a04 <prvAddCurrentTaskToDelayedList+0x58>
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d007      	beq.n	8003a04 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039f4:	4b1a      	ldr	r3, [pc, #104]	; (8003a60 <prvAddCurrentTaskToDelayedList+0xb4>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	3304      	adds	r3, #4
 80039fa:	4619      	mov	r1, r3
 80039fc:	481a      	ldr	r0, [pc, #104]	; (8003a68 <prvAddCurrentTaskToDelayedList+0xbc>)
 80039fe:	f7ff fa9f 	bl	8002f40 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003a02:	e026      	b.n	8003a52 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4413      	add	r3, r2
 8003a0a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003a0c:	4b14      	ldr	r3, [pc, #80]	; (8003a60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68ba      	ldr	r2, [r7, #8]
 8003a12:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003a14:	68ba      	ldr	r2, [r7, #8]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d209      	bcs.n	8003a30 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a1c:	4b13      	ldr	r3, [pc, #76]	; (8003a6c <prvAddCurrentTaskToDelayedList+0xc0>)
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	4b0f      	ldr	r3, [pc, #60]	; (8003a60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	3304      	adds	r3, #4
 8003a26:	4619      	mov	r1, r3
 8003a28:	4610      	mov	r0, r2
 8003a2a:	f7ff faad 	bl	8002f88 <vListInsert>
}
 8003a2e:	e010      	b.n	8003a52 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a30:	4b0f      	ldr	r3, [pc, #60]	; (8003a70 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	4b0a      	ldr	r3, [pc, #40]	; (8003a60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	3304      	adds	r3, #4
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	4610      	mov	r0, r2
 8003a3e:	f7ff faa3 	bl	8002f88 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003a42:	4b0c      	ldr	r3, [pc, #48]	; (8003a74 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68ba      	ldr	r2, [r7, #8]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d202      	bcs.n	8003a52 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003a4c:	4a09      	ldr	r2, [pc, #36]	; (8003a74 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	6013      	str	r3, [r2, #0]
}
 8003a52:	bf00      	nop
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	20000410 	.word	0x20000410
 8003a60:	2000030c 	.word	0x2000030c
 8003a64:	20000414 	.word	0x20000414
 8003a68:	200003f8 	.word	0x200003f8
 8003a6c:	200003c8 	.word	0x200003c8
 8003a70:	200003c4 	.word	0x200003c4
 8003a74:	2000042c 	.word	0x2000042c

08003a78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	3b04      	subs	r3, #4
 8003a88:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003a90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	3b04      	subs	r3, #4
 8003a96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	f023 0201 	bic.w	r2, r3, #1
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	3b04      	subs	r3, #4
 8003aa6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003aa8:	4a0c      	ldr	r2, [pc, #48]	; (8003adc <pxPortInitialiseStack+0x64>)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	3b14      	subs	r3, #20
 8003ab2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	3b04      	subs	r3, #4
 8003abe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f06f 0202 	mvn.w	r2, #2
 8003ac6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	3b20      	subs	r3, #32
 8003acc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003ace:	68fb      	ldr	r3, [r7, #12]
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3714      	adds	r7, #20
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr
 8003adc:	08003ae1 	.word	0x08003ae1

08003ae0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003aea:	4b11      	ldr	r3, [pc, #68]	; (8003b30 <prvTaskExitError+0x50>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af2:	d009      	beq.n	8003b08 <prvTaskExitError+0x28>
 8003af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af8:	f383 8811 	msr	BASEPRI, r3
 8003afc:	f3bf 8f6f 	isb	sy
 8003b00:	f3bf 8f4f 	dsb	sy
 8003b04:	60fb      	str	r3, [r7, #12]
 8003b06:	e7fe      	b.n	8003b06 <prvTaskExitError+0x26>
 8003b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b0c:	f383 8811 	msr	BASEPRI, r3
 8003b10:	f3bf 8f6f 	isb	sy
 8003b14:	f3bf 8f4f 	dsb	sy
 8003b18:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003b1a:	bf00      	nop
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d0fc      	beq.n	8003b1c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003b22:	bf00      	nop
 8003b24:	3714      	adds	r7, #20
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	20000014 	.word	0x20000014
	...

08003b40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003b40:	4b07      	ldr	r3, [pc, #28]	; (8003b60 <pxCurrentTCBConst2>)
 8003b42:	6819      	ldr	r1, [r3, #0]
 8003b44:	6808      	ldr	r0, [r1, #0]
 8003b46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b4a:	f380 8809 	msr	PSP, r0
 8003b4e:	f3bf 8f6f 	isb	sy
 8003b52:	f04f 0000 	mov.w	r0, #0
 8003b56:	f380 8811 	msr	BASEPRI, r0
 8003b5a:	4770      	bx	lr
 8003b5c:	f3af 8000 	nop.w

08003b60 <pxCurrentTCBConst2>:
 8003b60:	2000030c 	.word	0x2000030c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003b64:	bf00      	nop
 8003b66:	bf00      	nop

08003b68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003b68:	4808      	ldr	r0, [pc, #32]	; (8003b8c <prvPortStartFirstTask+0x24>)
 8003b6a:	6800      	ldr	r0, [r0, #0]
 8003b6c:	6800      	ldr	r0, [r0, #0]
 8003b6e:	f380 8808 	msr	MSP, r0
 8003b72:	f04f 0000 	mov.w	r0, #0
 8003b76:	f380 8814 	msr	CONTROL, r0
 8003b7a:	b662      	cpsie	i
 8003b7c:	b661      	cpsie	f
 8003b7e:	f3bf 8f4f 	dsb	sy
 8003b82:	f3bf 8f6f 	isb	sy
 8003b86:	df00      	svc	0
 8003b88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003b8a:	bf00      	nop
 8003b8c:	e000ed08 	.word	0xe000ed08

08003b90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b086      	sub	sp, #24
 8003b94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003b96:	4b44      	ldr	r3, [pc, #272]	; (8003ca8 <xPortStartScheduler+0x118>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a44      	ldr	r2, [pc, #272]	; (8003cac <xPortStartScheduler+0x11c>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d109      	bne.n	8003bb4 <xPortStartScheduler+0x24>
 8003ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba4:	f383 8811 	msr	BASEPRI, r3
 8003ba8:	f3bf 8f6f 	isb	sy
 8003bac:	f3bf 8f4f 	dsb	sy
 8003bb0:	613b      	str	r3, [r7, #16]
 8003bb2:	e7fe      	b.n	8003bb2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003bb4:	4b3c      	ldr	r3, [pc, #240]	; (8003ca8 <xPortStartScheduler+0x118>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a3d      	ldr	r2, [pc, #244]	; (8003cb0 <xPortStartScheduler+0x120>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d109      	bne.n	8003bd2 <xPortStartScheduler+0x42>
 8003bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc2:	f383 8811 	msr	BASEPRI, r3
 8003bc6:	f3bf 8f6f 	isb	sy
 8003bca:	f3bf 8f4f 	dsb	sy
 8003bce:	60fb      	str	r3, [r7, #12]
 8003bd0:	e7fe      	b.n	8003bd0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003bd2:	4b38      	ldr	r3, [pc, #224]	; (8003cb4 <xPortStartScheduler+0x124>)
 8003bd4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	22ff      	movs	r2, #255	; 0xff
 8003be2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003bec:	78fb      	ldrb	r3, [r7, #3]
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003bf4:	b2da      	uxtb	r2, r3
 8003bf6:	4b30      	ldr	r3, [pc, #192]	; (8003cb8 <xPortStartScheduler+0x128>)
 8003bf8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003bfa:	4b30      	ldr	r3, [pc, #192]	; (8003cbc <xPortStartScheduler+0x12c>)
 8003bfc:	2207      	movs	r2, #7
 8003bfe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c00:	e009      	b.n	8003c16 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8003c02:	4b2e      	ldr	r3, [pc, #184]	; (8003cbc <xPortStartScheduler+0x12c>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	3b01      	subs	r3, #1
 8003c08:	4a2c      	ldr	r2, [pc, #176]	; (8003cbc <xPortStartScheduler+0x12c>)
 8003c0a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003c0c:	78fb      	ldrb	r3, [r7, #3]
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	005b      	lsls	r3, r3, #1
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c16:	78fb      	ldrb	r3, [r7, #3]
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c1e:	2b80      	cmp	r3, #128	; 0x80
 8003c20:	d0ef      	beq.n	8003c02 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003c22:	4b26      	ldr	r3, [pc, #152]	; (8003cbc <xPortStartScheduler+0x12c>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f1c3 0307 	rsb	r3, r3, #7
 8003c2a:	2b04      	cmp	r3, #4
 8003c2c:	d009      	beq.n	8003c42 <xPortStartScheduler+0xb2>
 8003c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c32:	f383 8811 	msr	BASEPRI, r3
 8003c36:	f3bf 8f6f 	isb	sy
 8003c3a:	f3bf 8f4f 	dsb	sy
 8003c3e:	60bb      	str	r3, [r7, #8]
 8003c40:	e7fe      	b.n	8003c40 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003c42:	4b1e      	ldr	r3, [pc, #120]	; (8003cbc <xPortStartScheduler+0x12c>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	021b      	lsls	r3, r3, #8
 8003c48:	4a1c      	ldr	r2, [pc, #112]	; (8003cbc <xPortStartScheduler+0x12c>)
 8003c4a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003c4c:	4b1b      	ldr	r3, [pc, #108]	; (8003cbc <xPortStartScheduler+0x12c>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c54:	4a19      	ldr	r2, [pc, #100]	; (8003cbc <xPortStartScheduler+0x12c>)
 8003c56:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	b2da      	uxtb	r2, r3
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003c60:	4b17      	ldr	r3, [pc, #92]	; (8003cc0 <xPortStartScheduler+0x130>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a16      	ldr	r2, [pc, #88]	; (8003cc0 <xPortStartScheduler+0x130>)
 8003c66:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c6a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003c6c:	4b14      	ldr	r3, [pc, #80]	; (8003cc0 <xPortStartScheduler+0x130>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a13      	ldr	r2, [pc, #76]	; (8003cc0 <xPortStartScheduler+0x130>)
 8003c72:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003c76:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003c78:	f000 f8d6 	bl	8003e28 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003c7c:	4b11      	ldr	r3, [pc, #68]	; (8003cc4 <xPortStartScheduler+0x134>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003c82:	f000 f8f5 	bl	8003e70 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003c86:	4b10      	ldr	r3, [pc, #64]	; (8003cc8 <xPortStartScheduler+0x138>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a0f      	ldr	r2, [pc, #60]	; (8003cc8 <xPortStartScheduler+0x138>)
 8003c8c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003c90:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003c92:	f7ff ff69 	bl	8003b68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003c96:	f7ff fd5d 	bl	8003754 <vTaskSwitchContext>
	prvTaskExitError();
 8003c9a:	f7ff ff21 	bl	8003ae0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3718      	adds	r7, #24
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	e000ed00 	.word	0xe000ed00
 8003cac:	410fc271 	.word	0x410fc271
 8003cb0:	410fc270 	.word	0x410fc270
 8003cb4:	e000e400 	.word	0xe000e400
 8003cb8:	20000438 	.word	0x20000438
 8003cbc:	2000043c 	.word	0x2000043c
 8003cc0:	e000ed20 	.word	0xe000ed20
 8003cc4:	20000014 	.word	0x20000014
 8003cc8:	e000ef34 	.word	0xe000ef34

08003ccc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd6:	f383 8811 	msr	BASEPRI, r3
 8003cda:	f3bf 8f6f 	isb	sy
 8003cde:	f3bf 8f4f 	dsb	sy
 8003ce2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003ce4:	4b0e      	ldr	r3, [pc, #56]	; (8003d20 <vPortEnterCritical+0x54>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	3301      	adds	r3, #1
 8003cea:	4a0d      	ldr	r2, [pc, #52]	; (8003d20 <vPortEnterCritical+0x54>)
 8003cec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003cee:	4b0c      	ldr	r3, [pc, #48]	; (8003d20 <vPortEnterCritical+0x54>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d10e      	bne.n	8003d14 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003cf6:	4b0b      	ldr	r3, [pc, #44]	; (8003d24 <vPortEnterCritical+0x58>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d009      	beq.n	8003d14 <vPortEnterCritical+0x48>
 8003d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d04:	f383 8811 	msr	BASEPRI, r3
 8003d08:	f3bf 8f6f 	isb	sy
 8003d0c:	f3bf 8f4f 	dsb	sy
 8003d10:	603b      	str	r3, [r7, #0]
 8003d12:	e7fe      	b.n	8003d12 <vPortEnterCritical+0x46>
	}
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr
 8003d20:	20000014 	.word	0x20000014
 8003d24:	e000ed04 	.word	0xe000ed04

08003d28 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003d2e:	4b11      	ldr	r3, [pc, #68]	; (8003d74 <vPortExitCritical+0x4c>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d109      	bne.n	8003d4a <vPortExitCritical+0x22>
 8003d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d3a:	f383 8811 	msr	BASEPRI, r3
 8003d3e:	f3bf 8f6f 	isb	sy
 8003d42:	f3bf 8f4f 	dsb	sy
 8003d46:	607b      	str	r3, [r7, #4]
 8003d48:	e7fe      	b.n	8003d48 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8003d4a:	4b0a      	ldr	r3, [pc, #40]	; (8003d74 <vPortExitCritical+0x4c>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	4a08      	ldr	r2, [pc, #32]	; (8003d74 <vPortExitCritical+0x4c>)
 8003d52:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003d54:	4b07      	ldr	r3, [pc, #28]	; (8003d74 <vPortExitCritical+0x4c>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d104      	bne.n	8003d66 <vPortExitCritical+0x3e>
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003d66:	bf00      	nop
 8003d68:	370c      	adds	r7, #12
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	20000014 	.word	0x20000014
	...

08003d80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003d80:	f3ef 8009 	mrs	r0, PSP
 8003d84:	f3bf 8f6f 	isb	sy
 8003d88:	4b15      	ldr	r3, [pc, #84]	; (8003de0 <pxCurrentTCBConst>)
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	f01e 0f10 	tst.w	lr, #16
 8003d90:	bf08      	it	eq
 8003d92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003d96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d9a:	6010      	str	r0, [r2, #0]
 8003d9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003da0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003da4:	f380 8811 	msr	BASEPRI, r0
 8003da8:	f3bf 8f4f 	dsb	sy
 8003dac:	f3bf 8f6f 	isb	sy
 8003db0:	f7ff fcd0 	bl	8003754 <vTaskSwitchContext>
 8003db4:	f04f 0000 	mov.w	r0, #0
 8003db8:	f380 8811 	msr	BASEPRI, r0
 8003dbc:	bc09      	pop	{r0, r3}
 8003dbe:	6819      	ldr	r1, [r3, #0]
 8003dc0:	6808      	ldr	r0, [r1, #0]
 8003dc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dc6:	f01e 0f10 	tst.w	lr, #16
 8003dca:	bf08      	it	eq
 8003dcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003dd0:	f380 8809 	msr	PSP, r0
 8003dd4:	f3bf 8f6f 	isb	sy
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	f3af 8000 	nop.w

08003de0 <pxCurrentTCBConst>:
 8003de0:	2000030c 	.word	0x2000030c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003de4:	bf00      	nop
 8003de6:	bf00      	nop

08003de8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
	__asm volatile
 8003dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df2:	f383 8811 	msr	BASEPRI, r3
 8003df6:	f3bf 8f6f 	isb	sy
 8003dfa:	f3bf 8f4f 	dsb	sy
 8003dfe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003e00:	f7ff fbf0 	bl	80035e4 <xTaskIncrementTick>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d003      	beq.n	8003e12 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003e0a:	4b06      	ldr	r3, [pc, #24]	; (8003e24 <SysTick_Handler+0x3c>)
 8003e0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e10:	601a      	str	r2, [r3, #0]
 8003e12:	2300      	movs	r3, #0
 8003e14:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8003e1c:	bf00      	nop
 8003e1e:	3708      	adds	r7, #8
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	e000ed04 	.word	0xe000ed04

08003e28 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003e28:	b480      	push	{r7}
 8003e2a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003e2c:	4b0b      	ldr	r3, [pc, #44]	; (8003e5c <vPortSetupTimerInterrupt+0x34>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003e32:	4b0b      	ldr	r3, [pc, #44]	; (8003e60 <vPortSetupTimerInterrupt+0x38>)
 8003e34:	2200      	movs	r2, #0
 8003e36:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003e38:	4b0a      	ldr	r3, [pc, #40]	; (8003e64 <vPortSetupTimerInterrupt+0x3c>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a0a      	ldr	r2, [pc, #40]	; (8003e68 <vPortSetupTimerInterrupt+0x40>)
 8003e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e42:	099b      	lsrs	r3, r3, #6
 8003e44:	4a09      	ldr	r2, [pc, #36]	; (8003e6c <vPortSetupTimerInterrupt+0x44>)
 8003e46:	3b01      	subs	r3, #1
 8003e48:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003e4a:	4b04      	ldr	r3, [pc, #16]	; (8003e5c <vPortSetupTimerInterrupt+0x34>)
 8003e4c:	2207      	movs	r2, #7
 8003e4e:	601a      	str	r2, [r3, #0]
}
 8003e50:	bf00      	nop
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop
 8003e5c:	e000e010 	.word	0xe000e010
 8003e60:	e000e018 	.word	0xe000e018
 8003e64:	20000008 	.word	0x20000008
 8003e68:	10624dd3 	.word	0x10624dd3
 8003e6c:	e000e014 	.word	0xe000e014

08003e70 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003e70:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003e80 <vPortEnableVFP+0x10>
 8003e74:	6801      	ldr	r1, [r0, #0]
 8003e76:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003e7a:	6001      	str	r1, [r0, #0]
 8003e7c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003e7e:	bf00      	nop
 8003e80:	e000ed88 	.word	0xe000ed88

08003e84 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b08a      	sub	sp, #40	; 0x28
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003e90:	f7ff fafe 	bl	8003490 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003e94:	4b57      	ldr	r3, [pc, #348]	; (8003ff4 <pvPortMalloc+0x170>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d101      	bne.n	8003ea0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003e9c:	f000 f90c 	bl	80040b8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003ea0:	4b55      	ldr	r3, [pc, #340]	; (8003ff8 <pvPortMalloc+0x174>)
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	f040 808c 	bne.w	8003fc6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d01c      	beq.n	8003eee <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8003eb4:	2208      	movs	r2, #8
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4413      	add	r3, r2
 8003eba:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f003 0307 	and.w	r3, r3, #7
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d013      	beq.n	8003eee <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f023 0307 	bic.w	r3, r3, #7
 8003ecc:	3308      	adds	r3, #8
 8003ece:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f003 0307 	and.w	r3, r3, #7
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d009      	beq.n	8003eee <pvPortMalloc+0x6a>
	__asm volatile
 8003eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ede:	f383 8811 	msr	BASEPRI, r3
 8003ee2:	f3bf 8f6f 	isb	sy
 8003ee6:	f3bf 8f4f 	dsb	sy
 8003eea:	617b      	str	r3, [r7, #20]
 8003eec:	e7fe      	b.n	8003eec <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d068      	beq.n	8003fc6 <pvPortMalloc+0x142>
 8003ef4:	4b41      	ldr	r3, [pc, #260]	; (8003ffc <pvPortMalloc+0x178>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d863      	bhi.n	8003fc6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003efe:	4b40      	ldr	r3, [pc, #256]	; (8004000 <pvPortMalloc+0x17c>)
 8003f00:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003f02:	4b3f      	ldr	r3, [pc, #252]	; (8004000 <pvPortMalloc+0x17c>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003f08:	e004      	b.n	8003f14 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8003f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d903      	bls.n	8003f26 <pvPortMalloc+0xa2>
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1f1      	bne.n	8003f0a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003f26:	4b33      	ldr	r3, [pc, #204]	; (8003ff4 <pvPortMalloc+0x170>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d04a      	beq.n	8003fc6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003f30:	6a3b      	ldr	r3, [r7, #32]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2208      	movs	r2, #8
 8003f36:	4413      	add	r3, r2
 8003f38:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	6a3b      	ldr	r3, [r7, #32]
 8003f40:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f44:	685a      	ldr	r2, [r3, #4]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	1ad2      	subs	r2, r2, r3
 8003f4a:	2308      	movs	r3, #8
 8003f4c:	005b      	lsls	r3, r3, #1
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d91e      	bls.n	8003f90 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003f52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4413      	add	r3, r2
 8003f58:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	f003 0307 	and.w	r3, r3, #7
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d009      	beq.n	8003f78 <pvPortMalloc+0xf4>
 8003f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f68:	f383 8811 	msr	BASEPRI, r3
 8003f6c:	f3bf 8f6f 	isb	sy
 8003f70:	f3bf 8f4f 	dsb	sy
 8003f74:	613b      	str	r3, [r7, #16]
 8003f76:	e7fe      	b.n	8003f76 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7a:	685a      	ldr	r2, [r3, #4]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	1ad2      	subs	r2, r2, r3
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003f8a:	69b8      	ldr	r0, [r7, #24]
 8003f8c:	f000 f8f6 	bl	800417c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003f90:	4b1a      	ldr	r3, [pc, #104]	; (8003ffc <pvPortMalloc+0x178>)
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	4a18      	ldr	r2, [pc, #96]	; (8003ffc <pvPortMalloc+0x178>)
 8003f9c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003f9e:	4b17      	ldr	r3, [pc, #92]	; (8003ffc <pvPortMalloc+0x178>)
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	4b18      	ldr	r3, [pc, #96]	; (8004004 <pvPortMalloc+0x180>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d203      	bcs.n	8003fb2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003faa:	4b14      	ldr	r3, [pc, #80]	; (8003ffc <pvPortMalloc+0x178>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a15      	ldr	r2, [pc, #84]	; (8004004 <pvPortMalloc+0x180>)
 8003fb0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb4:	685a      	ldr	r2, [r3, #4]
 8003fb6:	4b10      	ldr	r3, [pc, #64]	; (8003ff8 <pvPortMalloc+0x174>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	431a      	orrs	r2, r3
 8003fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003fc6:	f7ff fa71 	bl	80034ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	f003 0307 	and.w	r3, r3, #7
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d009      	beq.n	8003fe8 <pvPortMalloc+0x164>
 8003fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd8:	f383 8811 	msr	BASEPRI, r3
 8003fdc:	f3bf 8f6f 	isb	sy
 8003fe0:	f3bf 8f4f 	dsb	sy
 8003fe4:	60fb      	str	r3, [r7, #12]
 8003fe6:	e7fe      	b.n	8003fe6 <pvPortMalloc+0x162>
	return pvReturn;
 8003fe8:	69fb      	ldr	r3, [r7, #28]
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3728      	adds	r7, #40	; 0x28
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	20004048 	.word	0x20004048
 8003ff8:	20004054 	.word	0x20004054
 8003ffc:	2000404c 	.word	0x2000404c
 8004000:	20004040 	.word	0x20004040
 8004004:	20004050 	.word	0x20004050

08004008 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b086      	sub	sp, #24
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d046      	beq.n	80040a8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800401a:	2308      	movs	r3, #8
 800401c:	425b      	negs	r3, r3
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	4413      	add	r3, r2
 8004022:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	685a      	ldr	r2, [r3, #4]
 800402c:	4b20      	ldr	r3, [pc, #128]	; (80040b0 <vPortFree+0xa8>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4013      	ands	r3, r2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d109      	bne.n	800404a <vPortFree+0x42>
 8004036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800403a:	f383 8811 	msr	BASEPRI, r3
 800403e:	f3bf 8f6f 	isb	sy
 8004042:	f3bf 8f4f 	dsb	sy
 8004046:	60fb      	str	r3, [r7, #12]
 8004048:	e7fe      	b.n	8004048 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d009      	beq.n	8004066 <vPortFree+0x5e>
 8004052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004056:	f383 8811 	msr	BASEPRI, r3
 800405a:	f3bf 8f6f 	isb	sy
 800405e:	f3bf 8f4f 	dsb	sy
 8004062:	60bb      	str	r3, [r7, #8]
 8004064:	e7fe      	b.n	8004064 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	685a      	ldr	r2, [r3, #4]
 800406a:	4b11      	ldr	r3, [pc, #68]	; (80040b0 <vPortFree+0xa8>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4013      	ands	r3, r2
 8004070:	2b00      	cmp	r3, #0
 8004072:	d019      	beq.n	80040a8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d115      	bne.n	80040a8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	685a      	ldr	r2, [r3, #4]
 8004080:	4b0b      	ldr	r3, [pc, #44]	; (80040b0 <vPortFree+0xa8>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	43db      	mvns	r3, r3
 8004086:	401a      	ands	r2, r3
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800408c:	f7ff fa00 	bl	8003490 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	685a      	ldr	r2, [r3, #4]
 8004094:	4b07      	ldr	r3, [pc, #28]	; (80040b4 <vPortFree+0xac>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4413      	add	r3, r2
 800409a:	4a06      	ldr	r2, [pc, #24]	; (80040b4 <vPortFree+0xac>)
 800409c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800409e:	6938      	ldr	r0, [r7, #16]
 80040a0:	f000 f86c 	bl	800417c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80040a4:	f7ff fa02 	bl	80034ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80040a8:	bf00      	nop
 80040aa:	3718      	adds	r7, #24
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	20004054 	.word	0x20004054
 80040b4:	2000404c 	.word	0x2000404c

080040b8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80040b8:	b480      	push	{r7}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80040be:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80040c2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80040c4:	4b27      	ldr	r3, [pc, #156]	; (8004164 <prvHeapInit+0xac>)
 80040c6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f003 0307 	and.w	r3, r3, #7
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00c      	beq.n	80040ec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	3307      	adds	r3, #7
 80040d6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f023 0307 	bic.w	r3, r3, #7
 80040de:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80040e0:	68ba      	ldr	r2, [r7, #8]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	4a1f      	ldr	r2, [pc, #124]	; (8004164 <prvHeapInit+0xac>)
 80040e8:	4413      	add	r3, r2
 80040ea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80040f0:	4a1d      	ldr	r2, [pc, #116]	; (8004168 <prvHeapInit+0xb0>)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80040f6:	4b1c      	ldr	r3, [pc, #112]	; (8004168 <prvHeapInit+0xb0>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	68ba      	ldr	r2, [r7, #8]
 8004100:	4413      	add	r3, r2
 8004102:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004104:	2208      	movs	r2, #8
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	1a9b      	subs	r3, r3, r2
 800410a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f023 0307 	bic.w	r3, r3, #7
 8004112:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	4a15      	ldr	r2, [pc, #84]	; (800416c <prvHeapInit+0xb4>)
 8004118:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800411a:	4b14      	ldr	r3, [pc, #80]	; (800416c <prvHeapInit+0xb4>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2200      	movs	r2, #0
 8004120:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004122:	4b12      	ldr	r3, [pc, #72]	; (800416c <prvHeapInit+0xb4>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2200      	movs	r2, #0
 8004128:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	1ad2      	subs	r2, r2, r3
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004138:	4b0c      	ldr	r3, [pc, #48]	; (800416c <prvHeapInit+0xb4>)
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	4a0a      	ldr	r2, [pc, #40]	; (8004170 <prvHeapInit+0xb8>)
 8004146:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	4a09      	ldr	r2, [pc, #36]	; (8004174 <prvHeapInit+0xbc>)
 800414e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004150:	4b09      	ldr	r3, [pc, #36]	; (8004178 <prvHeapInit+0xc0>)
 8004152:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004156:	601a      	str	r2, [r3, #0]
}
 8004158:	bf00      	nop
 800415a:	3714      	adds	r7, #20
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr
 8004164:	20000440 	.word	0x20000440
 8004168:	20004040 	.word	0x20004040
 800416c:	20004048 	.word	0x20004048
 8004170:	20004050 	.word	0x20004050
 8004174:	2000404c 	.word	0x2000404c
 8004178:	20004054 	.word	0x20004054

0800417c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004184:	4b28      	ldr	r3, [pc, #160]	; (8004228 <prvInsertBlockIntoFreeList+0xac>)
 8004186:	60fb      	str	r3, [r7, #12]
 8004188:	e002      	b.n	8004190 <prvInsertBlockIntoFreeList+0x14>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	60fb      	str	r3, [r7, #12]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	429a      	cmp	r2, r3
 8004198:	d8f7      	bhi.n	800418a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	68ba      	ldr	r2, [r7, #8]
 80041a4:	4413      	add	r3, r2
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d108      	bne.n	80041be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	685a      	ldr	r2, [r3, #4]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	441a      	add	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	68ba      	ldr	r2, [r7, #8]
 80041c8:	441a      	add	r2, r3
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d118      	bne.n	8004204 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	4b15      	ldr	r3, [pc, #84]	; (800422c <prvInsertBlockIntoFreeList+0xb0>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d00d      	beq.n	80041fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685a      	ldr	r2, [r3, #4]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	441a      	add	r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	601a      	str	r2, [r3, #0]
 80041f8:	e008      	b.n	800420c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80041fa:	4b0c      	ldr	r3, [pc, #48]	; (800422c <prvInsertBlockIntoFreeList+0xb0>)
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	601a      	str	r2, [r3, #0]
 8004202:	e003      	b.n	800420c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	429a      	cmp	r2, r3
 8004212:	d002      	beq.n	800421a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800421a:	bf00      	nop
 800421c:	3714      	adds	r7, #20
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	20004040 	.word	0x20004040
 800422c:	20004048 	.word	0x20004048

08004230 <__libc_init_array>:
 8004230:	b570      	push	{r4, r5, r6, lr}
 8004232:	4e0d      	ldr	r6, [pc, #52]	; (8004268 <__libc_init_array+0x38>)
 8004234:	4c0d      	ldr	r4, [pc, #52]	; (800426c <__libc_init_array+0x3c>)
 8004236:	1ba4      	subs	r4, r4, r6
 8004238:	10a4      	asrs	r4, r4, #2
 800423a:	2500      	movs	r5, #0
 800423c:	42a5      	cmp	r5, r4
 800423e:	d109      	bne.n	8004254 <__libc_init_array+0x24>
 8004240:	4e0b      	ldr	r6, [pc, #44]	; (8004270 <__libc_init_array+0x40>)
 8004242:	4c0c      	ldr	r4, [pc, #48]	; (8004274 <__libc_init_array+0x44>)
 8004244:	f000 f820 	bl	8004288 <_init>
 8004248:	1ba4      	subs	r4, r4, r6
 800424a:	10a4      	asrs	r4, r4, #2
 800424c:	2500      	movs	r5, #0
 800424e:	42a5      	cmp	r5, r4
 8004250:	d105      	bne.n	800425e <__libc_init_array+0x2e>
 8004252:	bd70      	pop	{r4, r5, r6, pc}
 8004254:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004258:	4798      	blx	r3
 800425a:	3501      	adds	r5, #1
 800425c:	e7ee      	b.n	800423c <__libc_init_array+0xc>
 800425e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004262:	4798      	blx	r3
 8004264:	3501      	adds	r5, #1
 8004266:	e7f2      	b.n	800424e <__libc_init_array+0x1e>
 8004268:	08004318 	.word	0x08004318
 800426c:	08004318 	.word	0x08004318
 8004270:	08004318 	.word	0x08004318
 8004274:	0800431c 	.word	0x0800431c

08004278 <memset>:
 8004278:	4402      	add	r2, r0
 800427a:	4603      	mov	r3, r0
 800427c:	4293      	cmp	r3, r2
 800427e:	d100      	bne.n	8004282 <memset+0xa>
 8004280:	4770      	bx	lr
 8004282:	f803 1b01 	strb.w	r1, [r3], #1
 8004286:	e7f9      	b.n	800427c <memset+0x4>

08004288 <_init>:
 8004288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800428a:	bf00      	nop
 800428c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800428e:	bc08      	pop	{r3}
 8004290:	469e      	mov	lr, r3
 8004292:	4770      	bx	lr

08004294 <_fini>:
 8004294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004296:	bf00      	nop
 8004298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800429a:	bc08      	pop	{r3}
 800429c:	469e      	mov	lr, r3
 800429e:	4770      	bx	lr
